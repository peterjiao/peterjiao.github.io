<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title></title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://peterjiao.com/"/>
  <updated>2018-06-08T10:36:34.000Z</updated>
  <id>http://peterjiao.com/</id>
  
  <author>
    <name>Peter Jiao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>simple-use-yaml</title>
    <link href="http://peterjiao.com/2018/06/08/simple-use-yaml/"/>
    <id>http://peterjiao.com/2018/06/08/simple-use-yaml/</id>
    <published>2018-06-08T10:36:10.000Z</published>
    <updated>2018-06-08T10:36:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>在YAML快速入门[<a href="https://www.jianshu.com/p/97222440cd08]中，我们已经简单介绍了YAML的语法，本节中主要介绍YAML的配置读取。" target="_blank" rel="noopener">https://www.jianshu.com/p/97222440cd08]中，我们已经简单介绍了YAML的语法，本节中主要介绍YAML的配置读取。</a></p><p>目前有很多可以生成和解析YAML的第三方工具，常见的，如SnakeYaml，jYaml，Jackson等，但是不同的工具功能还是差距较大，比如jYaml就不支持合并(&lt;&lt;)和(—)操作。我们下面来看看Springboot使用的SnakeYaml的基本使用方式。</p><p>简介<br>SnakeYaml是一个完整的YAML1.1规范Processor，支持UTF-8/UTF-16，支持Java对象的序列化/反序列化，支持所有YAML定义的类型（map,omap,set,常量，具体参考<a href="http://yaml.org/type/index.html）。" target="_blank" rel="noopener">http://yaml.org/type/index.html）。</a></p><p>快速使用<br>要使用SnakeYaml，首先引入maven依赖：</p><p><dependency><br>    <groupid>org.yaml</groupid><br>    <artifactid>snakeyaml</artifactid><br>    <version>1.17</version><br></dependency><br>我们来完成一个最简单的yaml解析例子：</p><p>@Test<br>public void testLoad() {<br>    String yamlStr = “key: hello yaml”;<br>    Yaml yaml = new Yaml();<br>    Object ret = yaml.load(yamlStr);<br>    System.out.println(ret);<br>}<br>结果输出：</p><p>{key=hello yaml}<br>简介解释：<br>1，使用Yaml类，创建一个Yaml对象，所有的解析操作都是从这个对象开始；<br>2，声明了一个yaml的字符串（当然也可以使用yaml文档等），定义了一个对象：key: hello yaml；<br>3，使用Yaml对象的load方法 public Object load(String yaml)加载一段yaml字符串，返回解析之后的对象；<br>我们通过打印ret的类型：</p><p>System.out.println(ret.getClass().getSimpleName());<br>可以看到，实际创建的是一个Map：LinkedHashMap。</p><p>load/loadAll/loadAs 方法使用<br>Yaml的load方法可以传入多种参数类型：<br>public Object load(String yaml)<br>public Object load(InputStream io)<br>public Object load(Reader io)</p><p>三个方法都是通过传入的不同类型的内容，解析得到结果对象。需要注意一点的是，SnakeYaml通过读入的内容是否包含BOM头来判断输入流的编码格式。如果不包含BOM头，默认为UTF-8编码。</p><p>下面再来看一个解析案例，这次使用yaml文件的方式。首先创建一个yaml文件：</p><p>#test.yaml</p><ul><li>value1</li><li>value2</li><li>value3<br>很明显结果应该是一个List集合，把该文件放到resources下：</li></ul><p>@Test<br>public void testType() throws Exception {<br>    Yaml yaml = new Yaml();<br>    List<string> ret = (List<string>)yaml.load(this.getClass().getClassLoader()<br>            .getResourceAsStream(“test.yaml”));<br>    System.out.println(ret);<br>}<br>打印结果：</string></string></p><p>[value1, value2, value3]<br>如果需要加载的yaml文件中包含多个yaml片段，则可以使用loadAll方法加载所有的yaml内容。比如有如下一个yaml文件：</p><p>#test2.yaml<br>sample1:<br>    r: 10<br>sample2:<br>    other: haha<br>sample3:<br>    x: 100<br>    y: 100<br>这个yaml文件内容很明显是一个对象(或者map)，对象的每一个属性对应的又是一个对象。要加载这个yaml文件，代码应该是：</p><p>@Test<br>public void test2() throws Exception {<br>    Yaml yaml = new Yaml();<br>    Map&lt;String, Object&gt; ret = (Map&lt;String, Object&gt;) yaml.load(this<br>            .getClass().getClassLoader().getResourceAsStream(“test2.yaml”));<br>    System.out.println(ret);<br>}<br>打印结果：</p><p>{sample1={r=10}, sample2={other=haha}, sample3={x=100, y=100}}<br>如果我们稍微修改一下test2.yaml文件：</p><hr><p>sample1: </p><pre><code>r: 10</code></pre><hr><p>sample2:</p><pre><code>other: haha</code></pre><hr><p>sample3:<br>    x: 100<br>    y: 100<br>按照YAML规范，这应该是三个yaml配置片段了。那么如果再使用上面的代码解析，就会报错：</p><p>image.png</p><p>可以看到，load方法无法处理—标记。</p><p>这种时候只能使用loadAll方法解析：<br>public Iterable<object> loadAll(String yaml)<br>public Iterable<object> loadAll(InputStream yaml)<br>public Iterable<object> loadAll(Reader yaml)</object></object></object></p><p>可以看到，loadAll方法返回的是一个Object的迭代对象，那么其中的每一个Object就是每一个yaml片段解析出来的对象：</p><p>@Test<br>public void test3() throws Exception {<br>    Yaml yaml = new Yaml();<br>    Iterable<object> ret = yaml.loadAll(this.getClass().getClassLoader()<br>            .getResourceAsStream(“test2.yaml”));<br>    for (Object o : ret) {<br>        System.out.println(o);<br>    }<br>}<br>打印的结果为：</object></p><p>{sample1={r=10}}<br>{sample2={other=haha}}<br>{sample3={x=100, y=100}}<br>可以看到，test2.yaml被解析成了三个Map。<br>这里需要注意一点的是，SnakeYaml是在每一次遍历的时候(即调用Iteratable的forEach方法的时候)，才会去解析下一个—分割的yaml片段。</p><p>上面所有的实例，都是把yaml配置转化成Map或者Collection，如果我们想直接把yaml配置转成指定对象呢？下面我们通过三个示例来简单看一下：</p><p>#address.yaml<br>lines: |<br>  458 Walkman Dr.<br>  Suite #292<br>city: Royal Oak<br>state: MI<br>postal: 48046<br>有指定的Address模型，我们想把address.yaml内容直接转化成Address对象：</p><p>@Setter<br>@Getter<br>@ToString<br>public class Address {<br>    private String lines;<br>    private String city;<br>    private String state;<br>    private Integer postal;<br>}<br>只需要使用Yaml的loadAs方法即可：</p><p>@Test<br>public void testAddress() throws Exception {<br>    Yaml yaml = new Yaml();<br>    Address ret = yaml.loadAs(this.getClass().getClassLoader()<br>            .getResourceAsStream(“address.yaml”), Address.class);<br>    Assert.assertNotNull(ret);<br>    Assert.assertEquals(“MI”, ret.getState());<br>}<br>loadAs方法的第二个参数类型，即是要创建的用于包装yaml数据的类型。<br>这是第一种方式，对于常见的对象包装其实已经完全足够，我们来看下第二种方式，第二种方式也比较简单，即使用YAML的!!类型强转来完成。这次的类型再复杂一些，我们创建一个Person类型：</p><p>@Setter<br>@Getter<br>@ToString<br>public class Person {</p><pre><code>private String given;private String family;private Address address;</code></pre><p>}<br>这个Person类型包含了我们上一个示例中的Address类型，来添加一个yaml文件：</p><p>#person.yaml<br>— !!cn.wolfcode.yaml.demo.domain.Person<br>given  : Chris<br>family : Dumars<br>address:<br>    lines: |<br>        458 Walkman Dr.<br>        Suite #292<br>    city    : Royal Oak<br>    state   : MI<br>    postal  : 48046<br>注意第一行，我们使用—代表一个yaml文档的开始，并且立刻使用!!告诉下面的类型为cn.wolfcode.yaml.demo.domain.Person。这样配置之后，我们就可以直接使用load方法来加载对象了：</p><p>@Test<br>public void testPerson() throws Exception {<br>    Yaml yaml = new Yaml();<br>    Person ret = (Person) yaml.load(this.getClass().getClassLoader()<br>            .getResourceAsStream(“person.yaml”));<br>    Assert.assertNotNull(ret);<br>    Assert.assertEquals(“MI”, ret.getAddress().getState());<br>}<br>我们直接使用load方法加载对象，并直接转化成Person对象即可。</p><p>第三种方式，其实是第一种loadAs方法的实现原理，即在创建Yaml对象时，配置用于映射文档的root构造器。首先去掉person.yaml第一行配置：</p><p>#person.yaml<br>given  : Chris<br>family : Dumars<br>address:<br>    lines: |<br>        458 Walkman Dr.<br>        Suite #292<br>    city    : Royal Oak<br>    state   : MI<br>    postal  : 48046<br>实现代码：</p><p>@Test<br>public void testPerson2() {<br>    Yaml yaml = new Yaml(new Constructor(Person.class));<br>    Person ret = (Person) yaml.load(this.getClass().getClassLoader()<br>            .getResourceAsStream(“person.yaml”));<br>    Assert.assertNotNull(ret);<br>    Assert.assertEquals(“MI”, ret.getAddress().getState());<br>}<br>可以看到，我们在创建Yaml对象的时候，传入了一个new Constructor(Person.class)对象，即指定了，yaml文件的root对象使用Person类型。注意这个Constructor是org.yaml.snakeyaml.constructor.Constructor对象。</p><p>SnakeYaml还能正确的识别集合中的类型。我们修改Person类：</p><p>@Setter<br>@Getter<br>@ToString<br>public class Person {</p><pre><code>private String given;private String family;private List&lt;Address&gt; address;</code></pre><p>}<br>在这里，address属性变成了一个类型安全的List，修改我们的person.yaml文件：</p><p>— !!cn.wolfcode.yaml.demo.domain.Person<br>given  : Chris<br>family : Dumars<br>address:</p><pre><code>-   lines: 458 Walkman  city    : Royal Oak  state   : MI  postal  : 48046-   lines: 459 Walkman  city    : Royal Oak  state   : MI  postal  : 48046</code></pre><p>我们的address属性由两个address构成，我们来看下这种情况下，是否能正确的识别：</p><p>@Test<br>public void testTypeDesc(){<br>    Yaml yaml = new Yaml(new Constructor(Person.class));<br>    Person ret = (Person) yaml.load(this.getClass().getClassLoader()<br>            .getResourceAsStream(“person.yaml”));<br>    System.out.println(ret);<br>}<br>我们来看下输出：<br>Person(given=Chris, family=Dumars, address=[Address(lines=458 Walkman, city=Royal Oak, state=MI, postal=48046), Address(lines=459 Walkman, city=Royal Oak, state=MI, postal=48046)])<br>可以看到，确实正确的识别到了address集合中的Address类型。</p><p>如果要明确数据类型，可以使用TypeDescription来描述具体的数据类型：</p><p>@Test<br>public void testTypeDesc() {<br>    Constructor cons = new Constructor(Person.class);<br>    TypeDescription td = new TypeDescription(Person.class);<br>    td.putListPropertyType(“address”, Address.class);<br>    cons.addTypeDescription(td);</p><pre><code>Yaml yaml = new Yaml();Person ret = (Person) yaml.load(this.getClass().getClassLoader()        .getResourceAsStream(&quot;person.yaml&quot;));System.out.println(ret);</code></pre><p>}<br>可以看到，首先创建了一个Person类型的构造器用于映射yaml文档根类型，接着创建了一个TypeDescription，并传入Person类型，代表这个TypeDescription是用来描述Person类型的结构，然后通过putListPropertyType(propertName,propertyType)来指定Person类型的address属性集合中的类型为Address类型，最后将这个类型描述注册到构造器描述中。<br>TypeDescription类型最常用的两个方法分别是：</p><p>public void putListPropertyType(String property, Class&lt;? extends Object&gt; type)<br>public void putMapPropertyType(String property, Class&lt;? extends Object&gt; key,<br>        Class&lt;? extends Object&gt; value)<br>分别用于限制List集合属性类型和Map集合属性类型，当然，Map类型需要分别指定key和value的值类型。</p><p>dump入门<br>上面简单的介绍了snakeYaml用于yaml文件的解析，下面简单通过几个例子看看怎么使用snakeYaml生成yaml文件。当然，对于yaml来说，更多的时候是作为配置文件存在。</p><p>首先我们来看一个简单的生成yaml格式字符串的例子：</p><p>@Test<br>public void testDump1() {<br>    Map&lt;String, Object&gt; obj = new HashMap&lt;String, Object&gt;();<br>    obj.put(“key1”, “value1”);<br>    obj.put(“key2”, 123);</p><pre><code>Yaml yaml = new Yaml();StringWriter sw = new StringWriter();yaml.dump(obj, sw);System.out.println(sw.toString());</code></pre><p>}<br>结果输出：</p><p>{key1: value1, key2: 123}<br>代码非常简单，直接使用Yaml的dump方法，就可以把一个对象输出到一个Writer中。我们简单的看一下dump方法的重载：</p><p>image.png</p><p>非常明确，dump用于输出一个对象，而dumpAll和loadAll方法对应，可以输出一组对象。</p><p>下面我们来测试一个自定义对象的输出：</p><p>@Test<br>public void testDump2() {<br>    Address adr = new Address();<br>    adr.setCity(“Royal Oak”);<br>    adr.setLines(“458 Walkman”);<br>    adr.setPostal(48046);<br>    adr.setState(“MI”);</p><pre><code>Yaml yaml = new Yaml();StringWriter sw = new StringWriter();yaml.dump(adr, sw);System.out.println(sw.toString());</code></pre><p>}<br>输出结果为：<br>!!cn.wolfcode.yaml.demo.domain.Address {city: Royal Oak, lines: 458 Walkman, postal: 48046,<br>state: MI}</p><p>接下来再来演示一个输出多个对象的情况：</p><p>@Test<br>public void testDump3() {<br>    Address adr = new Address();<br>    adr.setCity(“Royal Oak”);<br>    adr.setLines(“458 Walkman”);<br>    adr.setPostal(48046);<br>    adr.setState(“MI”);</p><pre><code>Address adr2 = new Address();adr2.setCity(&quot;Royal Oak&quot;);adr2.setLines(&quot;459 Walkman&quot;);adr2.setPostal(48046);adr2.setState(&quot;MI&quot;);List&lt;Address&gt; target=new ArrayList&lt;&gt;();target.add(adr);target.add(adr2);Yaml yaml = new Yaml();StringWriter sw = new StringWriter();yaml.dumpAll(target.iterator(), sw);System.out.println(sw.toString());</code></pre><p>}<br>输出结果为：</p><p>!!cn.wolfcode.yaml.demo.domain.Address {city: Royal Oak, lines: 458 Walkman, postal: 48046,<br>state: MI}<br>— !!cn.wolfcode.yaml.demo.domain.Address {city: Royal Oak, lines: 459 Walkman, postal: 48046,<br>state: MI}<br>符合预期。</p><p>当然，关于dump方法的更多使用，比如设置生成样式的DumperOptions，设置Tag格式的Representer等更高级一些的需求，大家可以查看SnakeYaml的开发文档：<a href="https://bitbucket.org/asomov/snakeyaml/wiki/Documentation" target="_blank" rel="noopener">https://bitbucket.org/asomov/snakeyaml/wiki/Documentation</a></p><p>链接：<a href="https://www.jianshu.com/p/d8136c913e52" target="_blank" rel="noopener">https://www.jianshu.com/p/d8136c913e52</a><br>來源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在YAML快速入门[&lt;a href=&quot;https://www.jianshu.com/p/97222440cd08]中，我们已经简单介绍了YAML的语法，本节中主要介绍YAML的配置读取。&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://ww
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>class_loader</title>
    <link href="http://peterjiao.com/2018/06/08/class-loader/"/>
    <id>http://peterjiao.com/2018/06/08/class-loader/</id>
    <published>2018-06-08T08:19:08.000Z</published>
    <updated>2018-06-08T08:29:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>#Class<t></t></p><blockquote><p>Class#getResource(String name)<br>根据 name 是否以’/‘ 开头，分两种情况：</p><ol><li>不以／开头。则将当前Class的package 作为指定name 的前path， 最终拼接 path+’/‘+name.replaceAll(“.”,”/“)。</li><li>以／开头，则不做任何替换。 所以，传入的name 必须是以／开头，且name应当是以／作为分隔符的而不是.作为分隔符。 含义就是，查找classpath 下指定路径的文件存在。</li></ol></blockquote><p>然后调用 ClassLoader#getResource(String newName)</p><p>#ClassLoader</p><blockquote><p>ClassLoader#getResource(String name)<br>委托机制，<br>会先使用BootstrapClassLoader<br>然后 ExtClassLoader<br>然后 AppClassLoader<br>进行查找指定name 文件的操作。 </p></blockquote><p>应用程序的path 是在AppClassLoader 的path中。<br>可知，name 应该是以／为分隔符的， 相当于是找文件，所以要以当前操作系统分隔符。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#Class&lt;t&gt;&lt;/t&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Class#getResource(String name)&lt;br&gt;根据 name 是否以’/‘ 开头，分两种情况：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不以／开头。则将当前Class的package 作为指定nam
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>why-byte-is-8-bit</title>
    <link href="http://peterjiao.com/2018/05/07/why-byte-is-8-bit/"/>
    <id>http://peterjiao.com/2018/05/07/why-byte-is-8-bit/</id>
    <published>2018-05-07T03:06:12.000Z</published>
    <updated>2018-05-07T03:07:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>30 人赞同了该回答<br>很简单，看看维基百科可以有个大概的粗浅认识。这里做一个简单概括和翻译。<br>Byte in Wikipedia<br>再探究一下Byte的定义：能够编码一个字符的最小可寻址单元：<br>Historically, the byte was the number of bits used to encode a single character of text in a computer [1][2] and for this reason it is the smallest addressable unit of memory in any computer architectures.<br>其实以前也有过4位，6位或7位为一byte的标准，IBM 701（36位字长，18位byte）、IBM 702（7位字长，7位byte）、CDC 6600（60位字长，12位byte）等等。但是我觉得，考虑到包含的信息量不够大（所以4位被弃用了），还有不够整齐美观（即不方便扩展，不适合整齐划一进行工业生产；想象一下假如以7位为一byte，内存和硬盘的大小就不再是2^n bit大小了，而是2^(n-1)*7 bit大小了，有些别扭），所以只有8位作为最通行的标准流行开来。</p><p>8位一Byte，字长为2^n bits，这个标准来自于IBM system/360（1950年代到1960年代）。IBM也参与了ASCII码（7位128个字符）的制定（1963），但是同时开展了EBCDIC表（8位256个字符）的制定，作为自己公司的BCDIC标准的一个升级版本，其实就是想与ASCII竞争，但这个表的确很乱，而且版本也不统一，造成了很多吐槽（比如字母表居然不连续，加入了很多用不到的字符等等。）虽然这个标准非常坑爹，但是却推广了8 bit为一字节的概念通行开来。<br>接下来AT&amp;T公司和8位处理器的兴起进一步推广了8位作为一个byte这一事实标准。由于ASCII码只有7位，出于表达英语字母及其他符号的必要，各个国家开始探索如何用多余的一位来表示其他的字符，这样就出现了很多“扩展ASCII字符集”，但是标准不一。IBM也推出了一个，叫做Code page 437。这个表也是MS-DOS所用的扩展ASCII码集，但是并不是最后的唯一标准。直到1985年，是国际标准化组织（ISO）及国际电工委员会（IEC）才联合制定的一系列8位字符集的标准，称为ISO 8859，全称ISO/IEC 8859，这才统一了混乱的标准。</p><p>说了这么多，只想表明一点：一个字节之所以有8个bit，是历史原因造成的（计算机前身是打印机），但是也是计算机原理，尤其是二进制特性的必然结果，是数据存储需要（必须要能在一个字节内表示超过100种状态，包括常用数字，大小写字母，和打印机上的其他控制符号）和早期计算机存储价格昂贵（所以没有用10个，16个或更多位），加上商业利益追求（IBM的推广）共同作用的结果。<br>发布于 2014-06-29</p><p><a href="https://www.zhihu.com/question/20870588" target="_blank" rel="noopener">from</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;30 人赞同了该回答&lt;br&gt;很简单，看看维基百科可以有个大概的粗浅认识。这里做一个简单概括和翻译。&lt;br&gt;Byte in Wikipedia&lt;br&gt;再探究一下Byte的定义：能够编码一个字符的最小可寻址单元：&lt;br&gt;Historically, the byte was th
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>static-prepare-init</title>
    <link href="http://peterjiao.com/2018/04/23/static-prepare-init/"/>
    <id>http://peterjiao.com/2018/04/23/static-prepare-init/</id>
    <published>2018-04-23T08:45:52.000Z</published>
    <updated>2018-04-23T08:46:17.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package classloader.time;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author jiaoshuai</span><br><span class="line"> * @date 2018/4/23</span><br><span class="line"> */</span><br><span class="line">public class StaticLoading &#123;</span><br><span class="line"></span><br><span class="line">  static &#123;</span><br><span class="line">    i = 3;</span><br><span class="line">//    System.out.println(i);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  static int i = 1;</span><br><span class="line"></span><br><span class="line">  public static void main(String[] args) &#123;</span><br><span class="line">    System.out.println(i); // 输出 1， 因为 声明在 prepare 阶段， 赋值在 init 阶段。 </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>resource-beautiful</title>
    <link href="http://peterjiao.com/2018/04/16/resource-beautiful/"/>
    <id>http://peterjiao.com/2018/04/16/resource-beautiful/</id>
    <published>2018-04-16T11:07:37.000Z</published>
    <updated>2018-06-11T07:10:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>resource 就1行代码调用service 层， 看着就舒服、漂亮、美</p><p>写在serivce 层方面 单元测试<br>前置校验在service 层，不再resource，也不在Dao ，可以避免重复检验</p><h1 id="resoucre-层-没有-compoment-注解，-spring-不会自动装配，-所以有些依赖Spring-的会执行不上。service没有问题-应该是会自动装配，装配serivce，待调查"><a href="#resoucre-层-没有-compoment-注解，-spring-不会自动装配，-所以有些依赖Spring-的会执行不上。service没有问题-应该是会自动装配，装配serivce，待调查" class="headerlink" title="resoucre 层 没有 compoment 注解， spring 不会自动装配， 所以有些依赖Spring 的会执行不上。service没有问题 (应该是会自动装配，装配serivce，待调查)"></a>resoucre 层 没有 compoment 注解， spring 不会自动装配， 所以有些依赖Spring 的会执行不上。service没有问题 (应该是会自动装配，装配serivce，待调查)</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">import javax.ws.rs.*;</span><br><span class="line">import javax.ws.rs.core.MediaType;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> */</span><br><span class="line">@Path(&quot;/v1/mini_app&quot;)</span><br><span class="line">public class MiniAppResource &#123;</span><br><span class="line"></span><br><span class="line">  @Autowired</span><br><span class="line">  MiniAppService miniAppService;</span><br><span class="line"></span><br><span class="line">  @Path(&quot;add.json&quot;)</span><br><span class="line">  @POST</span><br><span class="line">  @Produces(MediaType.APPLICATION_JSON)</span><br><span class="line">  @BaseInfo(</span><br><span class="line">    idx = 1,</span><br><span class="line">    desc = &quot;往小程序购物车中添加一种商品&quot;,</span><br><span class="line">    protocol = BaseInfo.Protocol.HTTPS,</span><br><span class="line">    authPolicy = BaseInfo.AuthPolicy.PUBLIC,</span><br><span class="line">    apiStatus = BaseInfo.ApiStatus.PUBLIC</span><br><span class="line">  )</span><br><span class="line">  public ApiCartProduct add(</span><br><span class="line">    @FormParam(&quot;sub_product_id&quot;)</span><br><span class="line">    long subProductId,</span><br><span class="line">    @FormParam(&quot;count&quot;)</span><br><span class="line">    int count,</span><br><span class="line">    @FormParam(&quot;device_token&quot;)</span><br><span class="line">    String deviceToken,</span><br><span class="line">    @HeaderParam(&quot;from_user_id&quot;)</span><br><span class="line">    Long fromUserId</span><br><span class="line">  ) &#123;</span><br><span class="line">    return miniAppService.add(subProductId, count, fromUserId, deviceToken);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Path(&quot;delete.json&quot;)</span><br><span class="line">  @POST</span><br><span class="line">  @Produces(MediaType.APPLICATION_JSON)</span><br><span class="line">  @BaseInfo(</span><br><span class="line">    idx = 2,</span><br><span class="line">    desc = &quot;批量删除购物车中商品&quot;,</span><br><span class="line">    protocol = BaseInfo.Protocol.HTTPS,</span><br><span class="line">    authPolicy = BaseInfo.AuthPolicy.PUBLIC,</span><br><span class="line">    apiStatus = BaseInfo.ApiStatus.PUBLIC,</span><br><span class="line">    resultDemo = CommonResult.class)</span><br><span class="line">  public CommonResult delete(</span><br><span class="line">    @FormParam(&quot;sub_product_id&quot;)</span><br><span class="line">      String subProductIdStr,</span><br><span class="line">    @FormParam(&quot;device_token&quot;)</span><br><span class="line">      String deviceToken,</span><br><span class="line">    @HeaderParam(&quot;from_user_id&quot;)</span><br><span class="line">      Long fromUserId</span><br><span class="line">  ) &#123;</span><br><span class="line">    return CommonResult.booleanCommonResult(</span><br><span class="line">      miniAppService.remove(fromUserId, deviceToken, subProductIdStr));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Path(&quot;update.json&quot;)</span><br><span class="line">  @POST</span><br><span class="line">  @Produces(MediaType.APPLICATION_JSON)</span><br><span class="line">  @BaseInfo(</span><br><span class="line">    idx = 3,</span><br><span class="line">    desc = &quot;更新购物车&quot;,</span><br><span class="line">    protocol = BaseInfo.Protocol.HTTPS,</span><br><span class="line">    authPolicy = BaseInfo.AuthPolicy.PUBLIC,</span><br><span class="line">    apiStatus = BaseInfo.ApiStatus.PUBLIC,</span><br><span class="line">    resultDemo = CommonResult.class)</span><br><span class="line">  public CommonResult update(</span><br><span class="line">    @FormParam(&quot;meta&quot;)</span><br><span class="line">    String metaStr,</span><br><span class="line">    @FormParam(&quot;device_token&quot;)</span><br><span class="line">    String deviceToken,</span><br><span class="line">    @HeaderParam(&quot;from_user_id&quot;)</span><br><span class="line">    Long fromUserId</span><br><span class="line">  ) &#123;</span><br><span class="line">    return CommonResult.booleanCommonResult(</span><br><span class="line">      miniAppService.update(fromUserId, deviceToken, metaStr));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;resource 就1行代码调用service 层， 看着就舒服、漂亮、美&lt;/p&gt;
&lt;p&gt;写在serivce 层方面 单元测试&lt;br&gt;前置校验在service 层，不再resource，也不在Dao ，可以避免重复检验&lt;/p&gt;
&lt;h1 id=&quot;resoucre-层-没有-c
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>last-recursion</title>
    <link href="http://peterjiao.com/2018/04/12/last-recursion/"/>
    <id>http://peterjiao.com/2018/04/12/last-recursion/</id>
    <published>2018-04-12T08:56:18.000Z</published>
    <updated>2018-04-12T09:06:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>尾递归<br>每次都使用1个stack， 不会造成 栈溢出<br>大多数并没有优化</p><p>java 会优化</p><p>def factn(x):<br>    return factn_iter(x, 1)</p><p>def factn_iter(x, product):<br>    if x == 1:<br>        return product<br>    return factn_iter(x-1, x * product)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">package realtest;</span><br><span class="line"></span><br><span class="line">import java.math.BigInteger;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author peterjiao</span><br><span class="line"> * @date 2018/4/12</span><br><span class="line"> */</span><br><span class="line">public class TRecursion &#123;</span><br><span class="line"></span><br><span class="line">  private BigInteger fact(int x)&#123;</span><br><span class="line"></span><br><span class="line">    if (x == 1)&#123;</span><br><span class="line">      return BigInteger.ONE;</span><br><span class="line">    &#125;</span><br><span class="line">    return fact(--x).multiply(BigInteger.valueOf(x));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  private BigInteger nfact(int x)&#123;</span><br><span class="line">    return nfactInter(x, BigInteger.ONE);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  private BigInteger nfactInter(int x, BigInteger res)&#123;</span><br><span class="line">    if (x == 1)&#123;</span><br><span class="line">      return res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return nfactInter(--x, res.multiply(BigInteger.valueOf(x)));</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  public static void main(String[] args) &#123;</span><br><span class="line">//    BigInteger fact = new TRecursion().fact(10000);</span><br><span class="line">//    System.out.println(fact.toString());</span><br><span class="line">    </span><br><span class="line">    BigInteger fact = new TRecursion().nfact(10000);</span><br><span class="line">    System.out.println(fact.toString());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;尾递归&lt;br&gt;每次都使用1个stack， 不会造成 栈溢出&lt;br&gt;大多数并没有优化&lt;/p&gt;
&lt;p&gt;java 会优化&lt;/p&gt;
&lt;p&gt;def factn(x):&lt;br&gt;    return factn_iter(x, 1)&lt;/p&gt;
&lt;p&gt;def factn_iter(x, pr
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>git-multi-person</title>
    <link href="http://peterjiao.com/2018/04/11/git-multi-person/"/>
    <id>http://peterjiao.com/2018/04/11/git-multi-person/</id>
    <published>2018-04-11T09:22:01.000Z</published>
    <updated>2018-04-11T09:23:09.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git-多人协作"><a href="#Git-多人协作" class="headerlink" title="Git 多人协作"></a>Git 多人协作</h1><blockquote><p>既然是多人，那就不谈单人如何是否喽</p></blockquote><h2 id="多人修改同一个项目，-不同功能-不会修改同一个文件"><a href="#多人修改同一个项目，-不同功能-不会修改同一个文件" class="headerlink" title="多人修改同一个项目， 不同功能(不会修改同一个文件)"></a>多人修改同一个项目， 不同功能(不会修改同一个文件)</h2><h2 id="多人修改同一个项目，-会修改同一个文件，-不存在依赖"><a href="#多人修改同一个项目，-会修改同一个文件，-不存在依赖" class="headerlink" title="多人修改同一个项目， 会修改同一个文件， 不存在依赖"></a>多人修改同一个项目， 会修改同一个文件， 不存在依赖</h2><h2 id="多人修改同一个项目，-会修改同一个文件，-存在依赖"><a href="#多人修改同一个项目，-会修改同一个文件，-存在依赖" class="headerlink" title="多人修改同一个项目， 会修改同一个文件， 存在依赖"></a>多人修改同一个项目， 会修改同一个文件， 存在依赖</h2><p><a href="https://www.zhihu.com/question/21596554" target="_blank" rel="noopener">https://www.zhihu.com/question/21596554</a><br><a href="https://www.zhihu.com/question/36352326" target="_blank" rel="noopener">https://www.zhihu.com/question/36352326</a><br><a href="https://gist.github.com/suziewong/4378619" target="_blank" rel="noopener">https://gist.github.com/suziewong/4378619</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Git-多人协作&quot;&gt;&lt;a href=&quot;#Git-多人协作&quot; class=&quot;headerlink&quot; title=&quot;Git 多人协作&quot;&gt;&lt;/a&gt;Git 多人协作&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;既然是多人，那就不谈单人如何是否喽&lt;/p&gt;
&lt;/blockquot
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>static-language-and-dynamic-language</title>
    <link href="http://peterjiao.com/2018/04/10/static-language-and-dynamic-language/"/>
    <id>http://peterjiao.com/2018/04/10/static-language-and-dynamic-language/</id>
    <published>2018-04-10T08:07:35.000Z</published>
    <updated>2018-04-10T08:07:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>a = 123 # a是整数<br>print(a)<br>a = ‘ABC’ # a变为字符串<br>print(a)<br>这种变量本身类型不固定的语言称之为动态语言，与之对应的是静态语言。静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。例如Java是静态语言，赋值语句如下（// 表示注释）：</p><p>int a = 123; // a是整数类型变量<br>a = “ABC”; // 错误：不能把字符串赋给整型变量<br>和静态语言相比，动态语言更灵活，就是这个原因。</p><p>请不要把赋值语句的等号等同于数学的等号。比如下面的代码：</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;a = 123 # a是整数&lt;br&gt;print(a)&lt;br&gt;a = ‘ABC’ # a变为字符串&lt;br&gt;print(a)&lt;br&gt;这种变量本身类型不固定的语言称之为动态语言，与之对应的是静态语言。静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。例如J
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>小解前后分离</title>
    <link href="http://peterjiao.com/2018/04/10/%E5%B0%8F%E8%A7%A3%E5%89%8D%E5%90%8E%E5%88%86%E7%A6%BB/"/>
    <id>http://peterjiao.com/2018/04/10/小解前后分离/</id>
    <published>2018-04-10T03:31:51.000Z</published>
    <updated>2018-04-10T03:32:27.000Z</updated>
    
    <content type="html"><![CDATA[<p># </p><blockquote><p>来新公司后了解到， 前后端分离，用json 交互， 后端提供一个http 接口返回json 格式数据。<br>web端、ios端、android端、wechat小程序  都可以使用同一个后端接口。<br>前后分离</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;# &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;来新公司后了解到， 前后端分离，用json 交互， 后端提供一个http 接口返回json 格式数据。&lt;br&gt;web端、ios端、android端、wechat小程序  都可以使用同一个后端接口。&lt;br&gt;前后分离&lt;/p&gt;
&lt;/b
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>怎样在一台电脑上同时使用公司 GitLab 和 Github 的服务</title>
    <link href="http://peterjiao.com/2017/04/17/2017-04-17-use-gitlab-github-together/"/>
    <id>http://peterjiao.com/2017/04/17/2017-04-17-use-gitlab-github-together/</id>
    <published>2017-04-17T09:06:05.000Z</published>
    <updated>2017-04-18T10:34:08.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><blockquote><p>[怎样在一台电脑上同时使用公司 GitLab 和 Github 的服务。</p></blockquote><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>由于公司团队使用 GitLab 来托管代码，同时，个人在 Github 上还有一些代码仓库，可公司邮箱与个人邮箱是不同的，由此产生的 SSH key 也是不同的，这就造成了冲突 ，文章提供此类问题的解决方案：<strong>如何在一台机器上面同时使用 Github 与 Gitlab 的服务？</strong></p><h1 id="问题产生场景"><a href="#问题产生场景" class="headerlink" title="问题产生场景"></a>问题产生场景</h1><hr><h2 id="无密码与远程服务器交互的秘密-SSH"><a href="#无密码与远程服务器交互的秘密-SSH" class="headerlink" title="无密码与远程服务器交互的秘密 - SSH"></a>无密码与远程服务器交互的秘密 - SSH</h2><p>如果采用<code>ssh 协议</code>或者<code>git 协议</code>通过终端命令对远程仓库进行<code>push</code>操作的时候，大概的过程如下：（前提在 Github 上已经配置的本机的 SSH Public Key）</p><ol><li>客户端发起一个 Public Key 的认证请求，并发送RSA Key的模数作为标识符。（关于 RSA Key 详细 <a href="https://en.wikipedia.org/wiki/RSA_(algorithm" target="_blank" rel="noopener">维基百科</a>)）</li><li>服务端检查是否存在请求帐号的公钥（Linux中存储在~/.ssh/authorized_keys文件中），以及其拥有的访问权限。</li><li>服务端使用对应的公钥对一个随机的256位的字符串进行加密，并发送给客户端。</li><li>客户端使用私钥对字符串进行解密，并将其结合session id生成一个MD5值发送给服务端。 结合session id的目的是为了避免攻击者采用重放攻击（replay attack）。</li><li>服务端采用同样的方式生成MD5值与客户端返回的MD5值进行比较，完成对客户端的认证。</li><li>将push的内容进行加密与服务端传输数据。</li></ol><p>关于 SSH，请查看 <a href="http://erik-2-blog.logdown.com/posts/74081-ssh-principle" target="_blank" rel="noopener">SSH原理简介</a> ，更通俗易懂的文章请查看<a href="http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html" target="_blank" rel="noopener">阮一峰-SSH原理与运用（一）：远程登录</a> 。</p><h2 id="具体场景"><a href="#具体场景" class="headerlink" title="具体场景"></a>具体场景</h2><p>无论使用哪种代码托管服务商，对于 Git 而言，<code>邮箱</code> 是识别用户的唯一手段，所以对于不同的服务商，由于邮箱不同，那么通过邮件名创建的 SSH Key 自然是不同的，这时候在不同的服务商之间进行 <code>push</code> 命令的时候，Git 是不知道使用哪个 SSH Key ，自然导致 <code>push</code> 的失败。场景如下：</p><ol><li>在公司团队使用搭建的 Gitlab 服务，提交邮箱<a href="mailto:`xirong.liu@corp.xx.com" target="_blank" rel="noopener">`xirong.liu@corp.xx.com</a><code>， 个人 Github 服务，提交邮箱</code><a href="mailto:ixirong.liu@gmail.com" target="_blank" rel="noopener">ixirong.liu@gmail.com</a>` （Bitbucket 同理）。</li><li>有两个Github账户，不同的账户提交不同的仓库内容。</li></ol><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h2 id="方案一：同一个邮箱"><a href="#方案一：同一个邮箱" class="headerlink" title="方案一：同一个邮箱"></a>方案一：同一个邮箱</h2><p>由于<code>邮箱</code>是识别的唯一手段，那么自然的，这两者采用同一个邮箱，生成的 public key 也会是同一个，上传到 Github 或者 Gitlab 上面，在 Git 的配置中 ，设置好 Global 的配置 ：<code>git config --global user.name &#39;xirong.liu&#39; &amp;&amp; git config --global user.email &#39;xirong.liu@corp.xx.com&#39;</code> 进行日常的开发是没有问题的。</p><p>实际生活中采用同一个邮箱的可能性并不是太大，这就引出了方案二</p><h2 id="方案二：基于config文件"><a href="#方案二：基于config文件" class="headerlink" title="方案二：基于config文件"></a>方案二：基于config文件</h2><p>所谓的方案二，原理上就是对 SSH 协议配置 config 文件，对不同的域名采用不同的认证密钥。</p><h4 id="git-config-介绍"><a href="#git-config-介绍" class="headerlink" title="git config 介绍"></a>git config 介绍</h4><p> Git有一个工具被称为git config，它允许你获得和设置配置变量；这些变量可以控制Git的外观和操作的各个方面。这些变量可以被存储在三个不同的位置： </p><ol><li>/etc/gitconfig 文件：包含了适用于系统所有用户和所有库的值。如果你传递参数选项’<code>--system</code>’ 给 git config，它将明确的读和写这个文件。 </li><li>~/.gitconfig 文件 ：具体到你的用户。你可以通过传递 ‘<code>--global</code>’ 选项使Git 读或写这个特定的文件。</li><li>位于 Git 目录的 config 文件 (也就是 .git/config) ：无论你当前在用的库是什么，特定指向该单一的库。每个级别重写前一个级别的值。因此，在 .git/config 中的值覆盖了在/etc/gitconfig中的同一个值，可以通过传递‘<code>--local</code>’选项使Git 读或写这个特定的文件。</li></ol><p>由于采用了不同的邮箱，对不同的服务商进行提交，所以此时我们经常配置的 <code>git config --global</code> 就不能常用了，必须在每个仓库的目录下进行配置自己的用户名、邮箱。（嫌麻烦？xirong 是这么解决的，由于个人的 Github 上有较多的仓库，而自己团队的代码基本上都是稳定的，有数的几个，所以在 <code>git config --global user.email &#39;ixirong.liu@gmail.com&#39;</code> 中全局配置的是个人邮箱，在团队的项目中配置）</p><h3 id="1-配置-Git-用户名、邮箱"><a href="#1-配置-Git-用户名、邮箱" class="headerlink" title="1.  配置 Git 用户名、邮箱"></a>1.  配置 Git 用户名、邮箱</h3><p>如刚才所说，xirong 的配置如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局配置，Github仓库中默认使用此配置</span></span><br><span class="line">git config --global user.name <span class="string">'xirong'</span> &amp;&amp; git config --global user.email <span class="string">'ixirong.liu@gmail.com'</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 团队项目配置，每次新创建一个项目，需要执行下</span></span><br><span class="line">git config --<span class="built_in">local</span> user.name <span class="string">'xirong.liu'</span> &amp;&amp; git config --<span class="built_in">local</span> user.email <span class="string">'xirong.liu@corp.xxx.com'</span></span><br></pre></td></tr></table></figure><h3 id="2-生成-ssh-key-上传到-Github-Gitlab"><a href="#2-生成-ssh-key-上传到-Github-Gitlab" class="headerlink" title="2. 生成 ssh key 上传到 Github/Gitlab"></a>2. 生成 ssh key 上传到 Github/Gitlab</h3><p>ssh key 默认生成后保存在 <code>~/.ssh/</code>目录下 ，默认为 <code>id_rsa 和 id_rsa.pub</code> 两个文件，由于我们需要分开配置，所以这么做：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成公钥、密钥的同时指定文件名，Gitlab使用</span></span><br><span class="line">ssh-keygen -t rsa -f ~/.ssh/id_rsa.gitlab -C <span class="string">"xirong.liu@corp.xxx.com"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成默认，Github使用</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">"ixirong.liu@gmail.com"</span></span><br></pre></td></tr></table></figure><p>命令执行完成后，这时<code>~/.ssh</code>目录下会多出<code>id_rsa.gitlab</code>和<code>id_rsa.gitlab.pub</code>两个文件，<code>id_rsa.gitlab.pub</code> 里保存的就是我们要使用的key，这个key就是用来上传到 Gitlab上的。</p><h3 id="3-配置-config-文件"><a href="#3-配置-config-文件" class="headerlink" title="3. 配置 config 文件"></a>3. 配置 config 文件</h3><p>在 <code>~/.ssh</code>目录下，如果不存在，则新建 <code>touch ~/.ssh/config</code>文件 ，文件内容添加如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Host *.corp.xxx.com</span><br><span class="line">     IdentityFile ~/.ssh/id_rsa.gitlab</span><br><span class="line">     User xirong.liu</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">    HostName github.com</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa.github</span><br></pre></td></tr></table></figure><p>配置完成后，符合 <code>*.corp.xxx.com</code>后缀的 Git 仓库，均采取<code>~/.ssh/id_rsa.gitlab</code> 密钥进行验证，其它的采取默认的。</p><p>添加私钥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-add ~/.ssh/id_rsa</span><br><span class="line">$ ssh-add ~/.ssh/id_rsa_github</span><br></pre></td></tr></table></figure><h3 id="4-上传public-key-到-Github-Gitlab"><a href="#4-上传public-key-到-Github-Gitlab" class="headerlink" title="4. 上传public key 到 Github/Gitlab"></a>4. 上传public key 到 Github/Gitlab</h3><p>以Github为例，过程如下：</p><ol><li>登录github</li><li>点击右上方的Accounting settings图标</li><li>选择 SSH key</li><li>点击 Add SSH key</li></ol><p>在出现的界面中填写SSH key的名称，填一个你自己喜欢的名称即可，然后将上面拷贝的<code>~/.ssh/id_rsa.pub</code>文件内容粘帖到<code>key</code>一栏，在点击“<code>add key</code>”按钮就可以了。</p><p>添加过程github会提示你输入一次你的github密码 ，确认后即添加完毕。 上传Gitlab的过程一样，请自己操作。</p><h3 id="5-验证是否OK"><a href="#5-验证是否OK" class="headerlink" title="5. 验证是否OK"></a>5. 验证是否OK</h3><p>由于每个托管商的仓库都有唯一的后缀，比如 Github的是 <a href="mailto:`git@github.com" target="_blank" rel="noopener">`git@github.com</a>:*`，所以可以这样测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  ~  ssh -T git@github.com</span><br><span class="line">Hi xirong! You<span class="string">'ve successfully authenticated, but GitHub does not provide shell access.</span></span><br><span class="line"><span class="string">➜  ~  ssh -T git@gitlab.dev</span></span><br><span class="line"><span class="string">Welcome to GitLab, xirong.liu!</span></span><br></pre></td></tr></table></figure><p>看到这些 <code>Welcome</code> 信息，说明就是 OK的了。</p><p>以后，如果还有任何的需求，都可以这么解决，看下 xirong 的几个托管仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">➜  ~  ll ~/.ssh</span><br><span class="line">total 40</span><br><span class="line">-rw-r--r-- 1 xirong staff  264 Jul 10 14:42 config</span><br><span class="line">-rw------- 1 xirong staff 3243 Jul 10 14:09 id_rsa</span><br><span class="line">-rw------- 1 xirong staff 1675 Jan 28 20:39 id_rsa.gitlab</span><br><span class="line">-rw-r--r-- 1 xirong staff  407 Jan 28 20:39 id_rsa.gitlab.pub</span><br><span class="line">-rw-r--r-- 1 xirong staff  747 Jul 10 14:09 id_rsa.pub</span><br><span class="line">-rw------- 1 xirong staff 1679 Jun 22 11:42 id_rsa_gitcafe</span><br><span class="line">-rw-r--r-- 1 xirong staff  407 Jun 22 11:42 id_rsa_gitcafe.pub</span><br><span class="line">-rw-r--r-- 1 xirong staff 9139 Jul 29 15:08 known_hosts</span><br></pre></td></tr></table></figure><p>参考:</p><p> <a href="https://github.com/xirong/my-git/blob/master/use-gitlab-github-together.md" target="_blank" rel="noopener">怎样在一台电脑上同时使用公司 GitLab 和 Github 的服务？</a></p><p><a href="http://xuyuan923.github.io/2014/11/04/github-gitlab-ssh/" target="_blank" rel="noopener">github/gitlab同时管理多个ssh key</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;content&lt;br&gt;{:toc}&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;[怎样在一台电脑上同时使用公司 GitLab 和 Github 的服务。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class
      
    
    </summary>
    
      <category term="Tools" scheme="http://peterjiao.com/categories/Tools/"/>
    
    
      <category term="Git Tools" scheme="http://peterjiao.com/tags/Git-Tools/"/>
    
  </entry>
  
  <entry>
    <title>Git常用命令总结</title>
    <link href="http://peterjiao.com/2017/04/17/2017-04-17-git-command/"/>
    <id>http://peterjiao.com/2017/04/17/2017-04-17-git-command/</id>
    <published>2017-04-17T08:06:05.000Z</published>
    <updated>2017-04-18T10:43:06.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><blockquote><p>Git常用命令总结。</p></blockquote><h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h1 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h1><h2 id="查"><a href="#查" class="headerlink" title="查"></a>查</h2><h3 id="查看本地分支"><a href="#查看本地分支" class="headerlink" title="查看本地分支"></a>查看本地分支</h3><p><code>git branch</code></p><h3 id="查看远程分支"><a href="#查看远程分支" class="headerlink" title="查看远程分支"></a>查看远程分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -r</span><br></pre></td></tr></table></figure><h3 id="查看所有分支-本地和远程"><a href="#查看所有分支-本地和远程" class="headerlink" title="查看所有分支(本地和远程)"></a>查看所有分支(本地和远程)</h3><p><code>$ git branch -a</code></p><p><code>git branch -av</code></p><h2 id="增"><a href="#增" class="headerlink" title="增"></a>增</h2><h3 id="clone远程非主分支"><a href="#clone远程非主分支" class="headerlink" title="clone远程非主分支"></a>clone远程非主分支</h3><p><code>git checkout origin/&lt;branchName&gt;</code></p><p><code>git checkout -b &lt;localBranchName&gt; origin/&lt;remoteBranchName&gt;</code></p><p>使用<code>-t</code>参数，默认建立一个和远程分支同名的分支</p><p><code>git checkout -t origin/&lt;remoteBranchName&gt;</code></p><h3 id="clone远程主分支"><a href="#clone远程主分支" class="headerlink" title="clone远程主分支"></a>clone远程主分支</h3><p><code>git clone &lt;url&gt;</code></p><h2 id="改"><a href="#改" class="headerlink" title="改"></a>改</h2><h3 id="重命名本地分支"><a href="#重命名本地分支" class="headerlink" title="重命名本地分支"></a>重命名本地分支</h3><p><code>git branch -m devel develop</code></p><h3 id="重命名远程分支"><a href="#重命名远程分支" class="headerlink" title="重命名远程分支"></a>重命名远程分支</h3><p>1.删除远程分支2.重命名本地分支3.推</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#查看</span><br><span class="line">$ git branch -av</span><br><span class="line">* feature-renames</span><br><span class="line">remotes/origin/feature-renames</span><br><span class="line">#删除</span><br><span class="line">git push --delete origin feature-renames</span><br><span class="line">#重命名本地</span><br><span class="line">git branch -m feature-renames feature-rename</span><br><span class="line">#推</span><br><span class="line">git push origin feature-rename</span><br></pre></td></tr></table></figure><h2 id="删"><a href="#删" class="headerlink" title="删"></a>删</h2><h3 id="删除本地分支"><a href="#删除本地分支" class="headerlink" title="删除本地分支"></a>删除本地分支</h3><h4 id="删除merge了的分支"><a href="#删除merge了的分支" class="headerlink" title="删除merge了的分支"></a>删除merge了的分支</h4><p><code>git branch -d &lt;banchName&gt;</code></p><h4 id="删除分支无论是否merge"><a href="#删除分支无论是否merge" class="headerlink" title="删除分支无论是否merge"></a>删除分支无论是否merge</h4><p><code>git branch -D &lt;banchName&gt;</code></p><h3 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h3><p>推送一个空的分支到远程分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin :&lt;branchName&gt;</span><br></pre></td></tr></table></figure><p><code>git push origin --delete &lt;branchName&gt;</code></p><h3 id="删除本地分支中在远程没有对应的分支"><a href="#删除本地分支中在远程没有对应的分支" class="headerlink" title="删除本地分支中在远程没有对应的分支"></a>删除本地分支中在远程没有对应的分支</h3><blockquote><p>1.创建b1分支 2. push到远程分支 3.其他人fetch或pull了b1分支 4.删除远程的b1分支5.但是其他人是不会自动删除b1分支的，即使再次fetch或者pull</p></blockquote><p>使用 <code>git remote show &lt;remoteName&gt;</code>可以观察到本地分支和远程分支差别</p><p>根据提示 使用 <code>git remote prune &lt;remoteName&gt;</code>会？</p><p><code>git fetch -p</code></p><p>获取存在的最新，不存在则删除本地分支！</p><h2 id="rebase"><a href="#rebase" class="headerlink" title="rebase"></a>rebase</h2><h1 id="tag"><a href="#tag" class="headerlink" title="tag"></a>tag</h1><p><code>git push origin :refs/tags/&lt;tagname&gt;</code></p><p><code>git push origin --delete tag &lt;tagname&gt;</code></p><p><code>git tag -d &lt;tagname&gt;</code></p><p><code>git push --tags</code></p><p><code>git fetch origin tag &lt;tagname&gt;</code></p><h1 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h1><p>从 来源 到 去处</p><h3 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h3><p><code>git fetch origin &lt;remoteBranchName&gt;</code></p><p><code>git fetch origin &lt;remoteBranchName&gt;:&lt;localBranchName&gt;</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;content&lt;br&gt;{:toc}&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Git常用命令总结。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Git&quot;&gt;&lt;a href=&quot;#Git&quot; class=&quot;headerlink&quot; title=&quot;Git
      
    
    </summary>
    
      <category term="Tools" scheme="http://peterjiao.com/categories/Tools/"/>
    
    
      <category term="Git Tools" scheme="http://peterjiao.com/tags/Git-Tools/"/>
    
  </entry>
  
  <entry>
    <title>如何写、写好年终总结？</title>
    <link href="http://peterjiao.com/2017/02/17/2017-02-18-%E5%A6%82%E4%BD%95%E5%86%99%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <id>http://peterjiao.com/2017/02/17/2017-02-18-如何写年终总结/</id>
    <published>2017-02-17T08:25:20.000Z</published>
    <updated>2017-02-18T09:53:10.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><blockquote><p>千万别让一年的努力白白浪费在拈纸之间，用心写好对你职业生涯会有好处的。</p></blockquote><h1 id="年终总结"><a href="#年终总结" class="headerlink" title="年终总结"></a>年终总结</h1><blockquote><p>年终总结就是对自己工作的梳理和提高。</p><p>年终总结的意义在于<strong>信息汇总与传递</strong>。通俗点来说，是要老板知道你过去一年的成果与不足，以及明年要怎么办。</p><p>ps: 最后想对在忙着制作年终总结PPT的伙伴们说一句：“千万别让一年的努力白白浪费在拈纸之间，用心写好对你职业生涯会有好处的”，</p></blockquote><p><br></p><h2 id="明确PPT流程，先讲啥后讲啥："><a href="#明确PPT流程，先讲啥后讲啥：" class="headerlink" title="明确PPT流程，先讲啥后讲啥："></a><strong>明确PPT流程，先讲啥后讲啥：</strong></h2><blockquote><p>工作回顾、心得体会、经验教训、新年计划</p></blockquote><p>具体到 采购 ：</p><h3 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h3><p>编一个大标题（也可以放最后）</p><p>【标题】可将主要内容、性质作标题，如不能表达出完整的意思，在正标题下可以再拟副标题</p><p>1、<strong>传统型：</strong>xx公司xx部门xx人年终总结</p><p>2、<strong>内容突出型：</strong>质量把控始终是家居企业工作第一要务——xx家居莘庄分厂厂长XX年终总结</p><p>3、<strong>直抒胸臆型：</strong>吃透转化客流才能抓商机——xx家装虹口分店店长xx年终总结    </p><p>4、<strong>展望未来型：</strong>拥抱互联网，它就是渠道——xx装饰营销部xx年终总结</p><p><br></p><h3 id="二、前言"><a href="#二、前言" class="headerlink" title="二、前言"></a>二、前言</h3><p>写一个简单粗暴不恶心的前言</p><p>【前言】前言写法多种多样，有的概述变化情况以及主要成绩；有的介绍基本情况；有的概述总结的目的、方法等等。力求简洁，开宗明义。</p><p><strong>内容包括：</strong><br>1、对工作内容的回顾，成绩的概括，引出正文<br>2、对行业、公司有利不利情况进行罗列，对工作的主客观条件进行分析<br>3、概述为什么要写总结的目的和意义<br>4、对正文的关键词概括</p><p>以上任选一条都可以</p><p><strong>前言要求简洁不简单，粗暴不恶心。</strong><br>当然你如果喜欢学一些<strong>深度催眠文</strong>：“夯实基础、全面分析、深入贯彻、狠抓落实，xx项目取得了阶段性成果”，“立足当前着眼未来自觉按规律办事”，那么老板都看睡着了，你的红包要改嫁也正常。</p><p><br></p><h3 id="三、工作回顾："><a href="#三、工作回顾：" class="headerlink" title="三、工作回顾："></a>三、工作回顾：</h3><p><strong>主要是全年一共完成了多少项采购计划，还有多少未完成，其中紧急单有多少，平均每月完成多少单，重点项目有哪些，最终完成度怎样等。</strong></p><p>总结要有计划和态度，多用图表<br><br></p><p><strong>别太低调</strong>，有成绩就要写出来，这是对工作负责的另一种态度<strong>。</strong></p><p><br></p><p>【实事求是】切忌写成岗位职责，而是要写出你做了哪些工作，<strong>尽量用“完成了……”</strong>，而不是<strong>“负责……”</strong></p><p>【成绩与缺点】 这是总结的中心。成绩有哪些，有多大，体现在哪，是什么性质的，怎样产生的，都应该讲清楚。</p><p><br></p><p>【图表分析】尽量多用<strong>个案、表格、图示</strong>，做 <strong>类比、对比、以量化数据</strong> 分析或说明的方式来展示成绩。</p><p><img src="/image/nzzj/nzzj_imgtable.png" alt="nzzj_imgtable"></p><p>尽量多用<strong>个案、表格、图示</strong>，做 <strong>类比、对比、以量化数据</strong> 分析或说明的方式来展示成绩。</p><p>尽量多用<strong>个案、表格、图示</strong>，做 <strong>类比、对比、以量化数据</strong> 分析或说明的方式来展示成绩。</p><p>一句话：哪里能够用图表，哪里就用！</p><p><br></p><p>【主体】叙事总结实践的过程、做法、体会、经验、教训，并且要作理论的概述，总结出规律性的东西，这是总结的核心，可按照纵式或横式结构形式撰写。<br><strong>注重细节</strong>，接待客户和产品的小细节总结起来存在大价值。</p><p>【保持风格】将自己的风格特点加入其中。 </p><p><br></p><h5 id="详述几个重点业绩"><a href="#详述几个重点业绩" class="headerlink" title="详述几个重点业绩"></a>详述几个重点业绩</h5><p>【关注业绩】在内容上进行有效的<strong>选取</strong>和<strong>整理</strong>，整理一个或几个<strong>核心事件</strong>来<strong>贯穿和体现业绩</strong>。</p><p>【突出重点】<strong>上司关注的问题</strong>一定要详细具体。</p><p>【量化事件】尽量将每项工作的<strong>完成情况用数字</strong>表达出来。量化才更具体，有可比性。</p><p>【文字少数字多】年终汇报和平时的工作汇报不太一样的地方是“信息量饱和度”！平时的工作型PPT比较注重工作细节，文字较多，信息量较大，但是年终总结报告的PPT就不太一样了，信息量不要多，贵在“少而精”！</p><p>【挑几个重点汇报】一定要抓住一年来的<strong>工作重点</strong>和<strong>几个突出的成绩、亮点</strong>进行阐述，<strong>不能</strong>让领导产生“<strong>事情做了不少，但都印象不深</strong>”的感觉。总结要张弛有度，层次分明，有详细的有简要的。</p><p>【同上】不是所有的总结都适合集体汇报，应该分为“汇报总结”和“书面总结”。向集体汇报时，只总结<strong>工作内容，比如一年来已经完成了哪些任务，还未完成哪些任务，对于工作失误要分析原因，制定来年的工作计划</strong>等等。但是有些问题可能只适合想上司汇报，因此这部分不妨只作为书面汇报。 </p><p>【有自己的理解】总结是一个人思维模式的体现，不能只有客观数据、理性分析的“一目了然”“一看就懂”(太简单)，也不能是长篇大论，要既有表格、图表作为辅助，又要有清晰明朗的文字汇报、<strong>主观意见，自己的理解</strong>。 </p><p><br></p><h3 id="四、心得体会："><a href="#四、心得体会：" class="headerlink" title="四、心得体会："></a>四、心得体会：</h3><p> 可以从不同物品类别采购数量与金额方面进行汇总，提出采购经验，同时对于公司降本增效提出一些优化建议，对于日常审批流程等等提出自己的见解，下来就是工作感想等。还有 费用问题、必要和不必要的花费、节省了多少、采购商品的质量、合作商家大概情况；在采购工作中，个人学到哪些东西，经验、感悟。采购流程现存的问题、合理化建议、工作中创新、与其他部门的合作。</p><p><br></p><h3 id="五、经验教训："><a href="#五、经验教训：" class="headerlink" title="五、经验教训："></a>五、经验教训：</h3><p>没有失误，可以写一些有提升空间的，怎么做可以比当时做的更省时省力有效。 </p><p>【经验与教训】对一年的工作进行分析、概括，以简练的语言总结成经验或教训。</p><p>【改进措施和计划】根据工作任务和要求，吸取前一时期工作的经验和教训，明确努力方向，提出改进措施等。要有针对性、可执行性。</p><p>【反思创新】总结的目的在于以后更好的工作。通过反思，找出问题所在，给出解决方案。 </p><p>【】失误总结、经验教训中，不<strong>轻描淡写</strong>，也不不要把自己的失误总结得过于细致，这种“放大缺点”的做法，会让领导<strong>怀疑</strong>你的能力。 </p><p><br></p><h3 id="六、新年计划："><a href="#六、新年计划：" class="headerlink" title="六、新年计划："></a>六、新年计划：</h3><p> 老板最在意的是总结之后的计划和态度。看看这个员工是不是上进啊，有干劲</p><p><img src="/image/nzzj/nzzj_end2.png" alt="nzzj_end2"></p><p>2017年的计划，在哪方面可以加强，哪方面可以创新，提升自己哪方面能力。</p><p>【结尾】提出今后努力方向，或支出存在问题，或表示自己的态度。</p><p>【简练通俗】注意语句简练、通俗，以最简单的方式说明问题    </p><p>【注意排版】一年一次展示自己的好机会，一定要呈现一份版面清晰、一目了然的总结</p><p>【平时经常总结】把平时的总结做好了，才能“多快好省”地写出一份到位的年终总结。 </p><p><br></p><h2 id="练习演讲"><a href="#练习演讲" class="headerlink" title="练习演讲"></a><strong>练习演讲</strong></h2><p><img src="/image/nzzj/nzzj_1_speak.png" alt="nzzj_1_speak"></p><p><br></p><h3 id="1、无过分相信自己演讲能力"><a href="#1、无过分相信自己演讲能力" class="headerlink" title="1、无过分相信自己演讲能力"></a>1、<strong>无过分相信自己演讲能力</strong></h3><p>很多朋友一直以为写完总结，工作就结束了。在我看来，这就好比你跑100米，最后跑了80米，看见有人欢呼，就以为比赛结束了，但事实上比赛没有结束。比赛真正结束是你演讲汇报结束的那一刻。千万别太相信自己的演讲能力，如果你不是专业讲师，如果你不是演讲达人，我建议你还是多多练习一下。</p><p><br></p><h3 id="2、控制好演讲节奏"><a href="#2、控制好演讲节奏" class="headerlink" title="2、控制好演讲节奏"></a>2、<strong>控制好演讲节奏</strong></h3><p>整个年终总结PPT演讲过程中非常需要注意整体的演讲节奏，写的时候要特别注意你的“成绩”如何让领导看见，讲的时候则要花时间在让领导听明白你未来的“宏伟计划”。</p><p><br></p><h3 id="3、辅助设备"><a href="#3、辅助设备" class="headerlink" title="3、辅助设备"></a><strong>3、辅助设备</strong></h3><p>翻页的时候不用每次都上到电脑跟前点击鼠标或键盘下一页，手里握着遥控器或手机，举手投足之间进入下一页，行云流水般顺畅。</p><p>为了有效演讲，我建议你准备辅助的演讲设备，例如：翻页遥控器 。</p><p>下载： <a href="https://ppt.baidu.com/" target="_blank" rel="noopener">百度-微信扫一扫-PPT遥控器_下载链接</a></p><p>ps:使用之前别忘了实地(实际使用的笔记本)测试一下</p><p><br></p><h2 id="PPT模板"><a href="#PPT模板" class="headerlink" title="PPT模板"></a><strong>PPT模板</strong></h2><p>个人年终总结不一定非要用单位的PPT模板，可以使用相对个性化一些的PPT模板。</p><p><a href="http://mp.weixin.qq.com/s?__biz=MzA4ODM1MTMzMQ==&amp;mid=402472634&amp;idx=1&amp;sn=5a6b545ee0a9184d08a025a4e080b885" target="_blank" rel="noopener">PPT色系、字体 选择</a></p><p><a href="http://mp.weixin.qq.com/s/melN-40AsrpwxEFfxNqn_A" target="_blank" rel="noopener">2017年终总结PPT模板__下载</a></p><p><br></p><p><br></p><p><br></p><h2 id="文章摘抄自："><a href="#文章摘抄自：" class="headerlink" title="文章摘抄自："></a>文章摘抄自：</h2><p><a href="https://www.zhihu.com/question/40315465" target="_blank" rel="noopener">工作总结、年终总结到底怎么写比较好？</a><br><a href="https://www.zhihu.com/question/20746965/answer/79222609" target="_blank" rel="noopener">年终总结的意义何在？你们都是怎么写年终总结的？</a><br><a href="https://zhuanlan.zhihu.com/p/24540380" target="_blank" rel="noopener">如何做好年终总结PPT</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzA4ODM1MTMzMQ==&amp;mid=402472634&amp;idx=1&amp;sn=5a6b545ee0a9184d08a025a4e080b885" target="_blank" rel="noopener">这份年终总结PPT称第二，没人敢称第一</a></p><p><br></p><p><br></p><p><br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;content&lt;br&gt;{:toc}&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;千万别让一年的努力白白浪费在拈纸之间，用心写好对你职业生涯会有好处的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;年终总结&quot;&gt;&lt;a href=&quot;#年终总结&quot; cl
      
    
    </summary>
    
      <category term="工作文档" scheme="http://peterjiao.com/categories/%E5%B7%A5%E4%BD%9C%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="年终总结 工作文档" scheme="http://peterjiao.com/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93-%E5%B7%A5%E4%BD%9C%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title>数据库--MySQL默认配置文件备份</title>
    <link href="http://peterjiao.com/2017/01/10/2017-01-10-%E6%95%B0%E6%8D%AE%E5%BA%93--MySQL%20%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <id>http://peterjiao.com/2017/01/10/2017-01-10-数据库--MySQL 配置文件/</id>
    <published>2017-01-10T12:36:55.000Z</published>
    <updated>2017-02-08T07:28:22.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><blockquote><p>MySQL默认配置文件备份。</p></blockquote><h1 id="MySQL-配置文件备份"><a href="#MySQL-配置文件备份" class="headerlink" title="MySQL 配置文件备份"></a>MySQL 配置文件备份</h1><h2 id="my-small-cnf-lt-64M"><a href="#my-small-cnf-lt-64M" class="headerlink" title="my-small.cnf (&lt;= 64M)"></a>my-small.cnf (&lt;= 64M)</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> Example mysql config file for small systems.</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> This is for a system with little memory (&lt;= 64M) where MySQL is only used</span><br><span class="line"><span class="meta">#</span> from time to time and it's important that the mysqld deamon</span><br><span class="line"><span class="meta">#</span> doesn't use much resources.</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> You can copy this file to</span><br><span class="line"><span class="meta">#</span> /etc/my.cnf to set global options,</span><br><span class="line"><span class="meta">#</span> mysql-data-dir/my.cnf to set server-specific options (in this</span><br><span class="line"><span class="meta">#</span> installation this directory is /var/lib/mysql) or</span><br><span class="line"><span class="meta">#</span> ~/.my.cnf to set user-specific options.</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> One can in this file use all long options that the program supports.</span><br><span class="line"><span class="meta">#</span> If you want to know which options a program support, run the program</span><br><span class="line"><span class="meta">#</span> with --help option.</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> The following options will be passed to all MySQL clients</span><br><span class="line">[client]</span><br><span class="line"><span class="meta">#</span>password= your_password</span><br><span class="line">port= 3306</span><br><span class="line">socket= /var/run/mysqld/mysqld.sock</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Here follows entries for some specific programs</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> The MySQL server</span><br><span class="line">[mysqld]</span><br><span class="line">port= 3306</span><br><span class="line">socket= /var/run/mysqld/mysqld.sock</span><br><span class="line">skip-locking</span><br><span class="line">set-variable= key_buffer=16K</span><br><span class="line">set-variable= max_allowed_packet=1M</span><br><span class="line">set-variable= thread_stack=64K</span><br><span class="line">set-variable= table_cache=4</span><br><span class="line">set-variable= sort_buffer=64K</span><br><span class="line">set-variable= net_buffer_length=2K</span><br><span class="line">server-id= 1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Uncomment the following if you want to log updates</span><br><span class="line"><span class="meta">#</span>log-bin</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Uncomment the following if you are NOT using BDB tables</span><br><span class="line"><span class="meta">#</span>skip-bdb</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Uncomment the following if you are using Innobase tables</span><br><span class="line"><span class="meta">#</span>innodb_data_file_path = ibdata1:100M</span><br><span class="line"><span class="meta">#</span>innodb_data_home_dir = /var/lib/mysql/</span><br><span class="line"><span class="meta">#</span>innodb_log_group_home_dir = /var/lib/mysql/</span><br><span class="line"><span class="meta">#</span>innodb_log_arch_dir = /var/lib/mysql/</span><br><span class="line"><span class="meta">#</span>set-variable = innodb_mirrored_log_groups=1</span><br><span class="line"><span class="meta">#</span>set-variable = innodb_log_files_in_group=3</span><br><span class="line"><span class="meta">#</span>set-variable = innodb_log_file_size=5M</span><br><span class="line"><span class="meta">#</span>set-variable = innodb_log_buffer_size=8M</span><br><span class="line"><span class="meta">#</span>innodb_flush_log_at_trx_commit=1</span><br><span class="line"><span class="meta">#</span>innodb_log_archive=0</span><br><span class="line"><span class="meta">#</span>set-variable = innodb_buffer_pool_size=16M</span><br><span class="line"><span class="meta">#</span>set-variable = innodb_additional_mem_pool_size=2M</span><br><span class="line"><span class="meta">#</span>set-variable = innodb_file_io_threads=4</span><br><span class="line"><span class="meta">#</span>set-variable = innodb_lock_wait_timeout=50</span><br><span class="line"></span><br><span class="line">[mysqldump]</span><br><span class="line">quick</span><br><span class="line">set-variable= max_allowed_packet=16M</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">no-auto-rehash</span><br><span class="line"><span class="meta">#</span> Remove the next comment character if you are not familiar with SQL</span><br><span class="line"><span class="meta">#</span>safe-updates</span><br><span class="line"></span><br><span class="line">[isamchk]</span><br><span class="line">set-variable= key_buffer=8M</span><br><span class="line">set-variable= sort_buffer=8M</span><br><span class="line"></span><br><span class="line">[myisamchk]</span><br><span class="line">set-variable= key_buffer=8M</span><br><span class="line">set-variable= sort_buffer=8M</span><br><span class="line"></span><br><span class="line">[mysqlhotcopy]</span><br><span class="line">interactive-timeout</span><br></pre></td></tr></table></figure><h2 id="my-medium-cnf-128M"><a href="#my-medium-cnf-128M" class="headerlink" title="my-medium.cnf (128M)"></a>my-medium.cnf (128M)</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> Example mysql config file for medium systems.</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> This is for a system with little memory (32M - 64M) where MySQL plays</span><br><span class="line"><span class="meta">#</span> a important part and systems up to 128M very MySQL is used together with</span><br><span class="line"><span class="meta">#</span> other programs (like a web server)</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> You can copy this file to</span><br><span class="line"><span class="meta">#</span> /etc/my.cnf to set global options,</span><br><span class="line"><span class="meta">#</span> mysql-data-dir/my.cnf to set server-specific options (in this</span><br><span class="line"><span class="meta">#</span> installation this directory is /var/lib/mysql) or</span><br><span class="line"><span class="meta">#</span> ~/.my.cnf to set user-specific options.</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> One can in this file use all long options that the program supports.</span><br><span class="line"><span class="meta">#</span> If you want to know which options a program support, run the program</span><br><span class="line"><span class="meta">#</span> with --help option.</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> The following options will be passed to all MySQL clients</span><br><span class="line">[client]</span><br><span class="line"><span class="meta">#</span>password= your_password</span><br><span class="line">port= 3306</span><br><span class="line">socket= /var/run/mysqld/mysqld.sock</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Here follows entries for some specific programs</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> The MySQL server</span><br><span class="line">[mysqld]</span><br><span class="line">port= 3306</span><br><span class="line">socket= /var/run/mysqld/mysqld.sock</span><br><span class="line">skip-locking</span><br><span class="line">set-variable= key_buffer=16M</span><br><span class="line">set-variable= max_allowed_packet=1M</span><br><span class="line">set-variable= table_cache=64</span><br><span class="line">set-variable= sort_buffer=512K</span><br><span class="line">set-variable= net_buffer_length=8K</span><br><span class="line">set-variable= myisam_sort_buffer_size=8M</span><br><span class="line">log-bin</span><br><span class="line">server-id= 1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Point the following paths to different dedicated disks</span><br><span class="line"><span class="meta">#</span>tmpdir= /tmp/</span><br><span class="line"><span class="meta">#</span>log-update = /path-to-dedicated-directory/hostname</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Uncomment the following if you are using BDB tables</span><br><span class="line"><span class="meta">#</span>set-variable= bdb_cache_size=4M</span><br><span class="line"><span class="meta">#</span>set-variable= bdb_max_lock=10000</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Uncomment the following if you are using Innobase tables</span><br><span class="line"><span class="meta">#</span>innodb_data_file_path = ibdata1:400M</span><br><span class="line"><span class="meta">#</span>innodb_data_home_dir = /var/lib/mysql/</span><br><span class="line"><span class="meta">#</span>innodb_log_group_home_dir = /var/lib/mysql/</span><br><span class="line"><span class="meta">#</span>innodb_log_arch_dir = /var/lib/mysql/</span><br><span class="line"><span class="meta">#</span>set-variable = innodb_mirrored_log_groups=1</span><br><span class="line"><span class="meta">#</span>set-variable = innodb_log_files_in_group=3</span><br><span class="line"><span class="meta">#</span>set-variable = innodb_log_file_size=5M</span><br><span class="line"><span class="meta">#</span>set-variable = innodb_log_buffer_size=8M</span><br><span class="line"><span class="meta">#</span>innodb_flush_log_at_trx_commit=1</span><br><span class="line"><span class="meta">#</span>innodb_log_archive=0</span><br><span class="line"><span class="meta">#</span>set-variable = innodb_buffer_pool_size=16M</span><br><span class="line"><span class="meta">#</span>set-variable = innodb_additional_mem_pool_size=2M</span><br><span class="line"><span class="meta">#</span>set-variable = innodb_file_io_threads=4</span><br><span class="line"><span class="meta">#</span>set-variable = innodb_lock_wait_timeout=50</span><br><span class="line"></span><br><span class="line">[mysqldump]</span><br><span class="line">quick</span><br><span class="line">set-variable= max_allowed_packet=16M</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">no-auto-rehash</span><br><span class="line"><span class="meta">#</span> Remove the next comment character if you are not familiar with SQL</span><br><span class="line"><span class="meta">#</span>safe-updates</span><br><span class="line"></span><br><span class="line">[isamchk]</span><br><span class="line">set-variable= key_buffer=20M</span><br><span class="line">set-variable= sort_buffer=20M</span><br><span class="line">set-variable= read_buffer=2M</span><br><span class="line">set-variable= write_buffer=2M</span><br><span class="line"></span><br><span class="line">[myisamchk]</span><br><span class="line">set-variable= key_buffer=20M</span><br><span class="line">set-variable= sort_buffer=20M</span><br><span class="line">set-variable= read_buffer=2M</span><br><span class="line">set-variable= write_buffer=2M</span><br><span class="line"></span><br><span class="line">[mysqlhotcopy]</span><br><span class="line">interactive-timeout</span><br></pre></td></tr></table></figure><h2 id="my-large-cnf-512M"><a href="#my-large-cnf-512M" class="headerlink" title="my-large.cnf (512M)"></a>my-large.cnf (512M)</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> Example mysql config file for large systems.</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> This is for large system with memory = 512M where the system runs mainly</span><br><span class="line"><span class="meta">#</span> MySQL.</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> You can copy this file to</span><br><span class="line"><span class="meta">#</span> /etc/my.cnf to set global options,</span><br><span class="line"><span class="meta">#</span> mysql-data-dir/my.cnf to set server-specific options (in this</span><br><span class="line"><span class="meta">#</span> installation this directory is /var/lib/mysql) or</span><br><span class="line"><span class="meta">#</span> ~/.my.cnf to set user-specific options.</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> One can in this file use all long options that the program supports.</span><br><span class="line"><span class="meta">#</span> If you want to know which options a program support, run the program</span><br><span class="line"><span class="meta">#</span> with --help option.</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> The following options will be passed to all MySQL clients</span><br><span class="line">[client]</span><br><span class="line"><span class="meta">#</span>password= your_password</span><br><span class="line">port= 3306</span><br><span class="line">socket= /var/run/mysqld/mysqld.sock</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Here follows entries for some specific programs</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> The MySQL server</span><br><span class="line">[mysqld]</span><br><span class="line">port= 3306</span><br><span class="line">socket= /var/run/mysqld/mysqld.sock</span><br><span class="line">skip-locking</span><br><span class="line">set-variable= key_buffer=256M</span><br><span class="line">set-variable= max_allowed_packet=1M</span><br><span class="line">set-variable= table_cache=256</span><br><span class="line">set-variable= sort_buffer=1M</span><br><span class="line">set-variable= record_buffer=1M</span><br><span class="line">set-variable= myisam_sort_buffer_size=64M</span><br><span class="line">set-variable= thread_cache=8</span><br><span class="line"><span class="meta">#</span> Try number of CPU's*2 for thread_concurrency</span><br><span class="line">set-variable= thread_concurrency=8</span><br><span class="line">log-bin</span><br><span class="line">server-id= 1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Uncomment the following if you are using BDB tables</span><br><span class="line"><span class="meta">#</span>set-variable= bdb_cache_size=64M</span><br><span class="line"><span class="meta">#</span>set-variable= bdb_max_lock=100000</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Uncomment the following if you are using Innobase tables</span><br><span class="line"><span class="meta">#</span>innodb_data_file_path = ibdata1:1000M</span><br><span class="line"><span class="meta">#</span>innodb_data_home_dir = /var/lib/mysql/</span><br><span class="line"><span class="meta">#</span>innodb_log_group_home_dir = /var/lib/mysql/</span><br><span class="line"><span class="meta">#</span>innodb_log_arch_dir = /var/lib/mysql/</span><br><span class="line"><span class="meta">#</span>set-variable = innodb_mirrored_log_groups=1</span><br><span class="line"><span class="meta">#</span>set-variable = innodb_log_files_in_group=3</span><br><span class="line"><span class="meta">#</span>set-variable = innodb_log_file_size=5M</span><br><span class="line"><span class="meta">#</span>set-variable = innodb_log_buffer_size=8M</span><br><span class="line"><span class="meta">#</span>innodb_flush_log_at_trx_commit=1</span><br><span class="line"><span class="meta">#</span>innodb_log_archive=0</span><br><span class="line"><span class="meta">#</span>set-variable = innodb_buffer_pool_size=16M</span><br><span class="line"><span class="meta">#</span>set-variable = innodb_additional_mem_pool_size=2M</span><br><span class="line"><span class="meta">#</span>set-variable = innodb_file_io_threads=4</span><br><span class="line"><span class="meta">#</span>set-variable = innodb_lock_wait_timeout=50</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Point the following paths to different dedicated disks</span><br><span class="line"><span class="meta">#</span>tmpdir= /tmp/</span><br><span class="line"><span class="meta">#</span>log-update = /path-to-dedicated-directory/hostname</span><br><span class="line"></span><br><span class="line">[mysqldump]</span><br><span class="line">quick</span><br><span class="line">set-variable= max_allowed_packet=16M</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">no-auto-rehash</span><br><span class="line"><span class="meta">#</span> Remove the next comment character if you are not familiar with SQL</span><br><span class="line"><span class="meta">#</span>safe-updates</span><br><span class="line"></span><br><span class="line">[isamchk]</span><br><span class="line">set-variable= key_buffer=128M</span><br><span class="line">set-variable= sort_buffer=128M</span><br><span class="line">set-variable= read_buffer=2M</span><br><span class="line">set-variable= write_buffer=2M</span><br><span class="line"></span><br><span class="line">[myisamchk]</span><br><span class="line">set-variable= key_buffer=128M</span><br><span class="line">set-variable= sort_buffer=128M</span><br><span class="line">set-variable= read_buffer=2M</span><br><span class="line">set-variable= write_buffer=2M</span><br><span class="line"></span><br><span class="line">[mysqlhotcopy]</span><br><span class="line">interactive-timeout</span><br></pre></td></tr></table></figure><h2 id="my-huge-cnf-1G-2G"><a href="#my-huge-cnf-1G-2G" class="headerlink" title="my-huge.cnf (1G-2G)"></a>my-huge.cnf (1G-2G)</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> Example mysql config file for very large systems.</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> This is for large system with memory of 1G-2G where the system runs mainly</span><br><span class="line"><span class="meta">#</span> MySQL.</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> You can copy this file to</span><br><span class="line"><span class="meta">#</span> /etc/my.cnf to set global options,</span><br><span class="line"><span class="meta">#</span> mysql-data-dir/my.cnf to set server-specific options (in this</span><br><span class="line"><span class="meta">#</span> installation this directory is /var/lib/mysql) or</span><br><span class="line"><span class="meta">#</span> ~/.my.cnf to set user-specific options.</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> One can in this file use all long options that the program supports.</span><br><span class="line"><span class="meta">#</span> If you want to know which options a program support, run the program</span><br><span class="line"><span class="meta">#</span> with --help option.</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> The following options will be passed to all MySQL clients</span><br><span class="line">[client]</span><br><span class="line"><span class="meta">#</span>password= your_password</span><br><span class="line">port= 3306</span><br><span class="line">socket= /var/run/mysqld/mysqld.sock</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Here follows entries for some specific programs</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> The MySQL server</span><br><span class="line">[mysqld]</span><br><span class="line">port= 3306</span><br><span class="line">socket= /var/run/mysqld/mysqld.sock</span><br><span class="line">skip-locking</span><br><span class="line">set-variable= key_buffer=384M</span><br><span class="line">set-variable= max_allowed_packet=1M</span><br><span class="line">set-variable= table_cache=512</span><br><span class="line">set-variable= sort_buffer=2M</span><br><span class="line">set-variable= record_buffer=2M</span><br><span class="line">set-variable= thread_cache=8</span><br><span class="line"><span class="meta">#</span> Try number of CPU's*2 for thread_concurrency</span><br><span class="line">set-variable= thread_concurrency=8</span><br><span class="line">set-variable= myisam_sort_buffer_size=64M</span><br><span class="line">log-bin</span><br><span class="line">server-id= 1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Point the following paths to different dedicated disks</span><br><span class="line"><span class="meta">#</span>tmpdir= /tmp/</span><br><span class="line"><span class="meta">#</span>log-update = /path-to-dedicated-directory/hostname</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Uncomment the following if you are using BDB tables</span><br><span class="line"><span class="meta">#</span>set-variable= bdb_cache_size=384M</span><br><span class="line"><span class="meta">#</span>set-variable= bdb_max_lock=100000</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Uncomment the following if you are using Innobase tables</span><br><span class="line"><span class="meta">#</span>innodb_data_file_path = ibdata1:2000M;ibdata2:2000M</span><br><span class="line"><span class="meta">#</span>innodb_data_home_dir = /var/lib/mysql/</span><br><span class="line"><span class="meta">#</span>innodb_log_group_home_dir = /var/lib/mysql/</span><br><span class="line"><span class="meta">#</span>innodb_log_arch_dir = /var/lib/mysql/</span><br><span class="line"><span class="meta">#</span>set-variable = innodb_mirrored_log_groups=1</span><br><span class="line"><span class="meta">#</span>set-variable = innodb_log_files_in_group=3</span><br><span class="line"><span class="meta">#</span>set-variable = innodb_log_file_size=5M</span><br><span class="line"><span class="meta">#</span>set-variable = innodb_log_buffer_size=8M</span><br><span class="line"><span class="meta">#</span>innodb_flush_log_at_trx_commit=1</span><br><span class="line"><span class="meta">#</span>innodb_log_archive=0</span><br><span class="line"><span class="meta">#</span>set-variable = innodb_buffer_pool_size=16M</span><br><span class="line"><span class="meta">#</span>set-variable = innodb_additional_mem_pool_size=2M</span><br><span class="line"><span class="meta">#</span>set-variable = innodb_file_io_threads=4</span><br><span class="line"><span class="meta">#</span>set-variable = innodb_lock_wait_timeout=50</span><br><span class="line"></span><br><span class="line">[mysqldump]</span><br><span class="line">quick</span><br><span class="line">set-variable= max_allowed_packet=16M</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">no-auto-rehash</span><br><span class="line"><span class="meta">#</span> Remove the next comment character if you are not familiar with SQL</span><br><span class="line"><span class="meta">#</span>safe-updates</span><br><span class="line"></span><br><span class="line">[isamchk]</span><br><span class="line">set-variable= key_buffer=256M</span><br><span class="line">set-variable= sort_buffer=256M</span><br><span class="line">set-variable= read_buffer=2M</span><br><span class="line">set-variable= write_buffer=2M</span><br><span class="line"></span><br><span class="line">[myisamchk]</span><br><span class="line">set-variable= key_buffer=256M</span><br><span class="line">set-variable= sort_buffer=256M</span><br><span class="line">set-variable= read_buffer=2M</span><br><span class="line">set-variable= write_buffer=2M</span><br><span class="line"></span><br><span class="line">[mysqlhotcopy]</span><br><span class="line">interactive-timeout</span><br></pre></td></tr></table></figure><p>from：<a href="http://www.fifi.org/doc/mysql-server/examples/" target="_blank" rel="noopener">来自</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">port = 3306</span><br><span class="line">socket = /tmp/mysql.sock</span><br><span class="line">default-character-set = utf8mb4</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">port = 3306</span><br><span class="line">socket = /tmp/mysql.sock</span><br><span class="line">basedir = /usr/local/mysql</span><br><span class="line">datadir = /usr/local/mysql/data/mysql</span><br><span class="line">pid-file = /usr/local/mysql/data/mysql/mysql.pid</span><br><span class="line">#user = mysql</span><br><span class="line">#bind-address = 0.0.0.0</span><br><span class="line">server-id = 1</span><br><span class="line">init-connect = &apos;SET NAMES utf8mb4&apos;</span><br><span class="line">character-set-server = utf8mb4</span><br><span class="line"></span><br><span class="line">#skip-name-resolve</span><br><span class="line">#skip-networking</span><br><span class="line">back_log = 300</span><br><span class="line">max_connections = 1000</span><br><span class="line">max_connect_errors = 6000</span><br><span class="line">open_files_limit = 65535</span><br><span class="line">table_open_cache = 128</span><br><span class="line">max_allowed_packet = 4M</span><br><span class="line">binlog_cache_size = 1M</span><br><span class="line">max_heap_table_size = 8M</span><br><span class="line">tmp_table_size = 8M</span><br><span class="line">read_buffer_size = 2M</span><br><span class="line">read_rnd_buffer_size = 8M</span><br><span class="line">sort_buffer_size = 64K</span><br><span class="line">join_buffer_size = 8M</span><br><span class="line">key_buffer_size = 4M</span><br><span class="line">thread_cache_size = 8</span><br><span class="line">query_cache_type = 1</span><br><span class="line">query_cache_size = 8M</span><br><span class="line">query_cache_limit = 2M</span><br><span class="line">ft_min_word_len = 4</span><br><span class="line">log_bin = mysql-bin</span><br><span class="line">binlog_format = mixed</span><br><span class="line">expire_logs_days = 30</span><br><span class="line">log_error = /usr/local/mysql/data/mysql/mysql-error.log</span><br><span class="line">slow_query_log = 1</span><br><span class="line">long_query_time = 1</span><br><span class="line">slow_query_log_file = /usr/local/mysql/data/mysql/mysql-slow.log</span><br><span class="line">performance_schema = 0</span><br><span class="line">explicit_defaults_for_timestamp</span><br><span class="line">#lower_case_table_names = 1</span><br><span class="line">skip-external-locking</span><br><span class="line">default_storage_engine = InnoDB</span><br><span class="line">#default-storage-engine = MyISAM</span><br><span class="line">innodb_file_per_table = 1</span><br><span class="line">innodb_open_files = 500</span><br><span class="line">innodb_buffer_pool_size = 16M</span><br><span class="line">innodb_write_io_threads = 4</span><br><span class="line">innodb_read_io_threads = 4</span><br><span class="line">innodb_thread_concurrency = 0</span><br><span class="line">innodb_purge_threads = 1</span><br><span class="line">innodb_flush_log_at_trx_commit = 2</span><br><span class="line">innodb_log_buffer_size = 2M</span><br><span class="line">innodb_log_file_size = 5M</span><br><span class="line">innodb_log_files_in_group = 3</span><br><span class="line">innodb_max_dirty_pages_pct = 90</span><br><span class="line">innodb_lock_wait_timeout = 120</span><br><span class="line">bulk_insert_buffer_size = 8M</span><br><span class="line">myisam_sort_buffer_size = 8M</span><br><span class="line">myisam_max_sort_file_size = 10G</span><br><span class="line">myisam_repair_threads = 1</span><br><span class="line">interactive_timeout = 28800</span><br><span class="line">wait_timeout = 28800</span><br><span class="line"></span><br><span class="line">[mysqldump]</span><br><span class="line">quick</span><br><span class="line">max_allowed_packet = 16M</span><br><span class="line"></span><br><span class="line">[myisamchk]</span><br><span class="line">key_buffer_size = 8M</span><br><span class="line">sort_buffer_size = 8M</span><br><span class="line">read_buffer = 4M</span><br><span class="line">write_buffer = 4M</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[client]</span><br><span class="line">user=david</span><br><span class="line">password=88888888</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">########basic settings########</span><br><span class="line">server-id = 11</span><br><span class="line">port = 3306</span><br><span class="line">use[......]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;content&lt;br&gt;{:toc}&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;MySQL默认配置文件备份。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;MySQL-配置文件备份&quot;&gt;&lt;a href=&quot;#MySQL-配置文件备份&quot; class=&quot;
      
    
    </summary>
    
      <category term="数据库" scheme="http://peterjiao.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库 MySQL" scheme="http://peterjiao.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93-MySQL/"/>
    
  </entry>
  
  <entry>
    <title>数据库--并发</title>
    <link href="http://peterjiao.com/2017/01/09/2017-01-09-%E6%95%B0%E6%8D%AE%E5%BA%93--%E5%B9%B6%E5%8F%91/"/>
    <id>http://peterjiao.com/2017/01/09/2017-01-09-数据库--并发/</id>
    <published>2017-01-09T12:36:05.000Z</published>
    <updated>2017-02-08T07:28:56.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><blockquote><p>数据库并发。</p></blockquote><h1 id="数据库并发"><a href="#数据库并发" class="headerlink" title="数据库并发"></a>数据库并发</h1><blockquote><p>脏页、事务、B-Tree索引</p></blockquote><p>事务</p><p>数据库事务有严格的定义，必须同时满足4个特性：原子性(Atomic)、一致性(Consistency)、隔离线(Isolation)和持久性(Durabiliy)。简称ACID。 </p><ul><li>原子性：表示组成一个事务的多个数据库操作是一个不可分割的原子单元，只有所有的操作执行成功，整个事务才提交，事务中任何一个数据库操作失败，已执行的任何操作都必须撤销，让数据库回到初始状态。</li><li>一致性：事务操作成功后，数据库所处的状态和它的业务规则是一致的，即数据不会被破坏。 </li><li>隔离性：在并发数据操作时，不同的事务拥有各自的数据空间，它们的操作不会对对方产生干扰。准确地说，并非要求做到完全无干扰，数据库规定了多种隔离级别，不同的蛤蜊级别对应不同的干扰程度，隔离级别越高，数据一致性越好，并发性越弱。 </li><li>持久性：一旦事务提交成功后，事务中所有的数据操作都必须被持久化到数据库中，即使提交事务后，数据库马上崩溃，在数据库重启时，也必须保证能够通过某种机制回复数据。 </li></ul><p>数据库并发问题归结为5种，3类 </p><p>脏读(dirty read)</p><p>A事务读取B事务尚未提交的更改数据，并在这个数据基础上操作。如果B事务回滚，则A事务读到的数据根本是不被承认的。 </p><p>对A来说，B事务执行过程中对共享可变数据会进行2次修改，而A事务在B事务执行过程中读取了共享可变数据，而此时B事务只对共享可变数据进行了1次修改，还未完全改完(没有进行第2此修改)。即A读取了B事务执行过程中的一个临时值，而不是最终值。 </p><p>读的是其他事务执行过程中的一步的数据，是不被承认的。 是错的。 </p><p>不可重复读(unrepeatable read)</p><hr><h3 id="read-uncommitted"><a href="#read-uncommitted" class="headerlink" title="read uncommitted"></a>read uncommitted</h3><p>存在 脏读、不可重复读、幻读、第二类丢失更新</p><p>解决了 第一类丢失更新问题</p><p>一个事务中的任意一步的修改后（非最终值），其他事务都可以立即查到修改后的值。 </p><p>​                                          其他事务修改相同的记录会被阻塞。 </p><p>一个事务的任意一步</p><h3 id="read-committed"><a href="#read-committed" class="headerlink" title="read committed"></a>read committed</h3><h3 id="repeatable-read"><a href="#repeatable-read" class="headerlink" title="repeatable read"></a>repeatable read</h3><p>实际操作： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-- User表表结构：</span><br><span class="line"></span><br><span class="line">mysql&gt; describe user;</span><br><span class="line">+-------+--------------+------+-----+---------+----------------+</span><br><span class="line">| Field | Type         | Null | Key | Default | Extra          |</span><br><span class="line">+-------+--------------+------+-----+---------+----------------+</span><br><span class="line">| id    | int(11)      | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| name  | varchar(255) | YES  |     | NULL    |                |</span><br><span class="line">| age   | int(11)      | YES  |     | NULL    |                |</span><br><span class="line">+-------+--------------+------+-----+---------+----------------+</span><br><span class="line">3 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">-- age字段是一个int类型的字段，模拟两个事务同时操作age字段，最后看结果。 </span><br><span class="line"></span><br><span class="line">mysql&gt; select @@tx_isolation;</span><br><span class="line">+-----------------+</span><br><span class="line">| @@tx_isolation  |</span><br><span class="line">+-----------------+</span><br><span class="line">| REPEATABLE-READ |</span><br><span class="line">+-----------------+</span><br><span class="line">1 row in set (0.01 sec)</span><br><span class="line"></span><br><span class="line">-- *************都是Repeatable Read隔离级别的****************</span><br><span class="line"></span><br><span class="line">Transaction 1:::</span><br><span class="line"></span><br><span class="line">mysql&gt; start transaction ;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from user;</span><br><span class="line">+----+------+------+</span><br><span class="line">| id | name | age  |</span><br><span class="line">+----+------+------+</span><br><span class="line">|  1 | ss   |    3 |</span><br><span class="line">+----+------+------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">-----------------</span><br><span class="line">此处插入 事务2 ： </span><br><span class="line"></span><br><span class="line">transaction2</span><br><span class="line">mysql&gt; start transaction;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from user;</span><br><span class="line">+----+------+------+</span><br><span class="line">| id | name | age  |</span><br><span class="line">+----+------+------+</span><br><span class="line">|  1 | ss   |    3 |</span><br><span class="line">+----+------+------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">-- 开始操作age字段，将age字段值在原来的基础上-1.</span><br><span class="line">mysql&gt; update user set age=age-1 where id=1; </span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from user;</span><br><span class="line">+----+------+------+</span><br><span class="line">| id | name | age  |</span><br><span class="line">+----+------+------+</span><br><span class="line">|  1 | ss   |    2 |</span><br><span class="line">+----+------+------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">-- 提交</span><br><span class="line">mysql&gt; commit;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from user;</span><br><span class="line">+----+------+------+</span><br><span class="line">| id | name | age  |</span><br><span class="line">+----+------+------+</span><br><span class="line">|  1 | ss   |    2 |</span><br><span class="line">+----+------+------+</span><br><span class="line">1 row in set (0.01 sec)</span><br><span class="line"></span><br><span class="line">---------------</span><br><span class="line">-- 接着 操作事务1 </span><br><span class="line"></span><br><span class="line">-- 此处查询user表，发现age还是3，没有出现不可重复读。 </span><br><span class="line">mysql&gt; select * from user;</span><br><span class="line">+----+------+------+</span><br><span class="line">| id | name | age  |</span><br><span class="line">+----+------+------+</span><br><span class="line">|  1 | ss   |    3 |</span><br><span class="line">+----+------+------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">-- 此处操作age字段，在age基础上-1.</span><br><span class="line">mysql&gt; update user set age=age-1 where id=1;</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br><span class="line"></span><br><span class="line">-- ！此处发现，age-1后直接变为1，而不是2。 保证了第二类丢失更新操作不会发生。 </span><br><span class="line">mysql&gt; select * from user ;</span><br><span class="line">+----+------+------+</span><br><span class="line">| id | name | age  |</span><br><span class="line">+----+------+------+</span><br><span class="line">|  1 | ss   |    1 |</span><br><span class="line">+----+------+------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from user;</span><br><span class="line">+----+------+------+</span><br><span class="line">| id | name | age  |</span><br><span class="line">+----+------+------+</span><br><span class="line">|  1 | ss   |    1 |</span><br><span class="line">+----+------+------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>由上可见，repeatable read，可重复读的隔离级别，在5类问题上，只剩下 幻像读不能解决。 </p><p>Mysql默认就是这个隔离级别。 </p><h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><p>按锁定对象不同，分为表锁定和行锁定。 </p><p>按并发事务锁定关系不同，分为共享锁定和独占锁定。 </p><p>​    共享锁定会防止独占锁定，但允许其他的共享锁定。</p><p>​    而独占锁定既防止其他的独占锁定，也防止其他的共享锁定。</p><hr><h1 id="数据库基础"><a href="#数据库基础" class="headerlink" title="数据库基础"></a>数据库基础</h1><h2 id="MySQL配置与启动"><a href="#MySQL配置与启动" class="headerlink" title="MySQL配置与启动"></a>MySQL配置与启动</h2><h3 id="Linux平台下"><a href="#Linux平台下" class="headerlink" title="Linux平台下"></a>Linux平台下</h3><p>配置文件时*.cnf</p><p>多个位置部署配置文件，大多数情况放在/etc/下，文件名称只能是my.cnf。</p><p>自带文件放在/usr/share/mysql下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> netstat -nlp</span><br><span class="line">//3306是MySQL服务器监听端口</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#mysqladmin -uroot -p123456 shutdown</span><br><span class="line"></span><br><span class="line">#cd /usr/bin</span><br><span class="line">#./mysqld_safe &amp;</span><br><span class="line">#Starting mysqld daemon with databases from /var/lib/mysql</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># service mysql start</span><br><span class="line"></span><br><span class="line">#service mysql restart</span><br><span class="line"></span><br><span class="line">#service mysql stop</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">[client] </span><br><span class="line">#password = your_password</span><br><span class="line">port = 3306</span><br><span class="line">socket = /tmp/mysql.sock</span><br><span class="line">default-character-set=utf8 </span><br><span class="line">#*************************分割线*******************</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">basedir=D:/Program Files (x86)/MySql # 设置mysql的安装目录</span><br><span class="line">datadir=D:/Program Files (x86)/MySql/data # 设置mysql数据库的数据的存放目录，必须是data，或者是//xxx/data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">basedir=/usr/local/mysql</span><br><span class="line">datadir=/usr/local/mysql/data</span><br><span class="line"></span><br><span class="line">port = 3306</span><br><span class="line">socket = /tmp/mysql.sock</span><br><span class="line">default-character-set=utf8# 设置mysql服务器的字符集</span><br><span class="line">skip-locking</span><br><span class="line">key_buffer = 16k</span><br><span class="line">max_allowed_packet = 1M</span><br><span class="line">table_cache = 4</span><br><span class="line">sort_buffer_size = 64K</span><br><span class="line">read_buffer_size = 256K</span><br><span class="line">read_rnd_buffer_size = 256K</span><br><span class="line">net_buffer_length = 2K</span><br><span class="line">thread_stack = 64K</span><br><span class="line"></span><br><span class="line">#*************************分割线*******************</span><br><span class="line">[mysqldump]</span><br><span class="line">quick</span><br><span class="line">max_allowed_packet = 16M</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">no_auto_rehash</span><br><span class="line"></span><br><span class="line">[isamchk]</span><br><span class="line">key_buffer = 8M</span><br><span class="line">sort_buffer_size = 8M</span><br><span class="line"></span><br><span class="line">[myisamchk]</span><br><span class="line">key_buffer = 8M</span><br><span class="line">sort_buffer_site = 8M</span><br><span class="line"></span><br><span class="line">[mysqlhotcopy]</span><br><span class="line">interactive-timeout</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">port = 3306</span><br><span class="line">socket = /tmp/mysql.sock</span><br><span class="line">default-character-set = utf8mb4</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">port = 3306</span><br><span class="line">socket = /tmp/mysql.sock</span><br><span class="line">basedir = /usr/local/mysql</span><br><span class="line">datadir = /data/mysql</span><br><span class="line">pid-file = /data/mysql/mysql.pid</span><br><span class="line">user = mysql</span><br><span class="line">bind-address = 0.0.0.0</span><br><span class="line">server-id = 1</span><br><span class="line">init-connect = &apos;SET NAMES utf8mb4&apos;</span><br><span class="line">character-set-server = utf8mb4</span><br><span class="line"></span><br><span class="line">#skip-name-resolve</span><br><span class="line">#skip-networking</span><br><span class="line">back_log = 300</span><br><span class="line">max_connections = 1000</span><br><span class="line">max_connect_errors = 6000</span><br><span class="line">open_files_limit = 65535</span><br><span class="line">table_open_cache = 128</span><br><span class="line">max_allowed_packet = 4M</span><br><span class="line">binlog_cache_size = 1M</span><br><span class="line">max_heap_table_size = 8M</span><br><span class="line">tmp_table_size = 16M</span><br><span class="line">read_buffer_size = 2M</span><br><span class="line">read_rnd_buffer_size = 8M</span><br><span class="line">sort_buffer_size = 8M</span><br><span class="line">join_buffer_size = 8M</span><br><span class="line">key_buffer_size = 4M</span><br><span class="line">thread_cache_size = 8</span><br><span class="line">query_cache_type = 1</span><br><span class="line">query_cache_size = 8M</span><br><span class="line">query_cache_limit = 2M</span><br><span class="line">ft_min_word_len = 4</span><br><span class="line">log_bin = mysql-bin</span><br><span class="line">binlog_format = mixed</span><br><span class="line">expire_logs_days = 30</span><br><span class="line">log_error = /data/mysql/mysql-error.log</span><br><span class="line">slow_query_log = 1</span><br><span class="line">long_query_time = 1</span><br><span class="line">slow_query_log_file = /data/mysql/mysql-slow.log</span><br><span class="line">performance_schema = 0</span><br><span class="line">explicit_defaults_for_timestamp</span><br><span class="line">#lower_case_table_names = 1</span><br><span class="line">skip-external-locking</span><br><span class="line">default_storage_engine = InnoDB</span><br><span class="line">#default-storage-engine = MyISAM</span><br><span class="line">innodb_file_per_table = 1</span><br><span class="line">innodb_open_files = 500</span><br><span class="line">innodb_buffer_pool_size = 64M</span><br><span class="line">innodb_write_io_threads = 4</span><br><span class="line">innodb_read_io_threads = 4</span><br><span class="line">innodb_thread_concurrency = 0</span><br><span class="line">innodb_purge_threads = 1</span><br><span class="line">innodb_flush_log_at_trx_commit = 2</span><br><span class="line">innodb_log_buffer_size = 2M</span><br><span class="line">innodb_log_file_size = 32M</span><br><span class="line">innodb_log_files_in_group = 3</span><br><span class="line">innodb_max_dirty_pages_pct = 90</span><br><span class="line">innodb_lock_wait_timeout = 120</span><br><span class="line">bulk_insert_buffer_size = 8M</span><br><span class="line">myisam_sort_buffer_size = 8M</span><br><span class="line">myisam_max_sort_file_size = 10G</span><br><span class="line">myisam_repair_threads = 1</span><br><span class="line">interactive_timeout = 28800</span><br><span class="line">wait_timeout = 28800</span><br><span class="line"></span><br><span class="line">[mysqldump]</span><br><span class="line">quick</span><br><span class="line">max_allowed_packet = 16M</span><br><span class="line"></span><br><span class="line">[myisamchk]</span><br><span class="line">key_buffer_size = 8M</span><br><span class="line">sort_buffer_size = 8M</span><br><span class="line">read_buffer = 4M</span><br><span class="line">write_buffer = 4M</span><br></pre></td></tr></table></figure><h3 id="Mac平台"><a href="#Mac平台" class="headerlink" title="Mac平台"></a>Mac平台</h3><p>ps -ef|grep mysqld</p><p> netstat -an |grep 3306</p><p>mysql –help|grep ‘my.cnf’</p><p>ps aux|grep mysql|grep ‘my.cnf’</p><p>支付宝的五福很有意思。<br>社会主义核心价值观有十二个。<br>支付宝挑出来的是，富强，和谐，敬业，爱国，友善。<br>剩下的七个是民主、文明、自由、平等、公正、法治、诚信.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/mysql start --log_error=/tmp/DB-Server.localdomain.err</span><br></pre></td></tr></table></figure><h3 id="OS-X-系统安装的mysql默认是不用my-cnf配置文件的，仅是使用默认的数据库配置值。"><a href="#OS-X-系统安装的mysql默认是不用my-cnf配置文件的，仅是使用默认的数据库配置值。" class="headerlink" title="OS X 系统安装的mysql默认是不用my.cnf配置文件的，仅是使用默认的数据库配置值。"></a>OS X 系统安装的mysql默认是不用my.cnf配置文件的，仅是使用默认的数据库配置值。</h3><p>如要进行数据库定制，可到’/usr/local/mysql/support-files/‘文件夹底下，把里面的任一个.cnf配置文件复制到/etc/目录底下并修改文件名称为my.cnf。</p><p> 不过MAC OS X 系统的mysql确实不需要my.cnf来进行配置就已经足够可以使你满意运行了。</p><p>在Mac OS X 中默认是没有my.cnf 文件，如果需要对MySql 进行定制，拷贝以下目录中任意一个.cnf 文件。笔者拷贝my-medim.cnf 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/mysql/support-files/</span><br></pre></td></tr></table></figure><p>粘贴到以下目录下，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc</span><br></pre></td></tr></table></figure><p>并且重命名为my.cnf ，然后修改my.cnf 即可进行定制了。</p><h3 id="配置文件实例"><a href="#配置文件实例" class="headerlink" title="配置文件实例"></a>配置文件实例</h3><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>整型： </p><p>1~4字节、8字节 都有 。 </p><p>1字节，2^8次方位。 java是byte类型。 256</p><p>2字节，2^(8*2)次方位。java是short类型。65535</p><p>4字节，2^32次方位。java是int类型。 4294967295.</p><p>8字节，2^64次方位。java是long类型。9223372036854775807,18446744073709551615。</p><p>位类型： BIT(M) </p><p>1~8字节。 </p><p>最小值： BIT(1) 最大值：BIT(64)</p><p>浮点型： </p><p>float  , 4 字节，最小值 +- </p><p>double，8字节，</p><p>定点数类型：</p><p>dec(m,d)， M+2字节， 最大范围 与 double相同， m表示整数位，d表示小数有效范围 。 </p><p>decimal(m,d)，默认是10，0.</p><p>float(m,d),double(m,d) decimal(m,d)</p><p>当存入的小数超过m和d指定的位数时， 会截取，float和double是四舍五入。 </p><p>bit()最终存的是二进制，且需要指定最大字节数，如果存的数超过最大字节数，则不能存入。 </p><p>日期类型： </p><table><thead><tr><th>类型</th><th>字节</th><th>最小值</th><th>最大值</th></tr></thead><tbody><tr><td>Date</td><td>4</td><td>1000-01-01</td><td>9999-12-31</td></tr><tr><td>DateTime</td><td>8</td><td>1000-01-01 00:00:00</td><td>9999-12-31 23:59:59</td></tr><tr><td>TimeStamp</td><td>4</td><td>1970010180001</td><td>2038年的某个时刻</td></tr><tr><td>Time</td><td>3</td><td>-838:59:59</td><td>838:59:59</td></tr><tr><td>Year</td><td>1</td><td>1901</td><td>2155</td></tr></tbody></table><p>插入date类型，2017-01-04 12:12:13 或 20170104121213等</p><p>字符串： </p><table><thead><tr><th>字符串类型</th><th>字节</th><th>描述和存储需求</th></tr></thead><tbody><tr><td>Char(M)</td><td>M</td><td>M为0~255之间的整数</td></tr><tr><td>VarChar(M)</td><td></td><td>M为0~65535之间的整数，值的长度+1字节</td></tr><tr><td>TinyBlob</td><td></td><td>允许长度0~255字节，</td></tr><tr><td>Blob</td><td></td><td>0~65535</td></tr><tr><td>MediumBlob</td><td></td><td>0~16772150</td></tr><tr><td>LongBlob</td><td></td><td>int长度</td></tr><tr><td>TinyText</td><td></td><td>0~255字节</td></tr><tr><td>Text</td><td></td><td>0~65535字节</td></tr><tr><td>MediumText</td><td></td><td>0~167772150字节</td></tr><tr><td>LongText</td><td></td><td>int长度字节</td></tr><tr><td>VarBinary(M)</td><td></td><td>0~M个字节的变长字节字符串</td></tr><tr><td>Binary(M)</td><td>M</td></tr></tbody></table><p>char和varchar</p><p>char会删除保存的字符串末尾的空格。 </p><p>保存的字符串长度比较短， 0~255。</p><h3 id="存储引擎："><a href="#存储引擎：" class="headerlink" title="存储引擎："></a>存储引擎：</h3><table><thead><tr><th>特点</th><th>MyISAM</th><th>InnoDB</th><th>memory</th><th>merge</th><th>ndb</th></tr></thead><tbody><tr><td>存储限制</td><td>有？</td><td>64TB</td><td>有</td><td>没有</td><td>有</td></tr><tr><td>事务安全</td><td></td><td>支持</td><td></td><td></td><td></td></tr><tr><td>锁机制</td><td>表锁</td><td>行锁</td><td>表锁</td><td>表锁</td><td>行锁</td></tr><tr><td>B树搜索</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>哈希索引</td><td></td><td></td><td>支持</td><td></td><td>支持</td></tr><tr><td>全文索引</td><td>支持</td><td></td><td></td><td></td><td></td></tr><tr><td>集群索引</td><td></td><td>支持</td><td></td><td></td><td></td></tr><tr><td>数据缓存</td><td></td><td>支持</td><td>支持</td><td></td><td>支持</td></tr><tr><td>索引缓存</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>数据可压缩</td><td>支持</td><td></td><td></td><td></td><td></td></tr><tr><td>空间使用</td><td>低</td><td>高</td><td>N/A</td><td>低</td><td>低</td></tr><tr><td>内存使用</td><td>低</td><td>高</td><td>中</td><td>低</td><td>高</td></tr><tr><td>批量插入的速度</td><td>高</td><td>低</td><td>高</td><td>高</td><td>高</td></tr><tr><td>支持外键</td><td></td><td>支持</td><td></td><td></td></tr></tbody></table><h4 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h4><p>5.5版本前的默认引擎。</p><p>不支持事务、外键，优势是访问的速度快。 </p><p>对事务完整性没有要求，或以Select、insert为主的应用基本上都可以使用这个引擎来创建表。 </p><h4 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h4><p>支持具有提交、回滚和崩溃恢复能力的事务安全。</p><p>对比MyISAM引擎，innodb写的效率差一些，并且会占用更多的磁盘空间以保留数据和索引。 </p><h4 id="如何选择"><a href="#如何选择" class="headerlink" title="如何选择"></a>如何选择</h4><ul><li>MyISAM：如果应用以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性、并发性要求不是很高，那么选择这个存储引擎是非常合适的。MyISAM是在Web、数据仓储和其他应用环境下最常使用的存储引擎之一。 </li><li>InnoDB：用于事务处理应用程序，支持外键。如果应用对事务完整性有比较高的要求，在并发环境下要求数据的一致性，数据操作出了插入和查询意外，还包括很多的更新、删除操作，那么InnoDB存储引擎是比较合适的选择。InnoDB存储引擎出了有效地降低由于删除护额更新导致的锁定，还可以确保事务的完整提交(Commit)和回滚(Rollback)，对于类似计费系统或者财务系统等对数据准确性要求比较高的系统，InnoDB都是合适的选择。 </li><li>MEMORY：将所有数据保存在RAM中，在需要快速定位记录和其他类似数据的环境下可提供极快的访问。MEMORY的却显示对表的大小有限制，太大的表无法缓存在内存中，其次是要确保表的数据可以恢复，数据库异常终止后表中的数据hi可以恢复的。MEMORY表通常用于更新不太频繁的小表，泳衣快速得到访问结果。</li><li>MERGE：用于将一系列等同的MyISAM表以逻辑方式组合在一起，并作为一个对象引用它们。MERGE表的有点在于可以突破对单个MyISAM表大小的限制，并且通过将不同的表分布在多个磁盘上，可以有效改善MERGE表的访问效率。这对于诸如数据仓储等VLDB环境十分适合。</li><li>其他： 以上是Mysql自带的，还有很多第三方的存储引擎， 如 列式存储引擎Infobright，高写性能高压缩的TokuDB。 </li></ul><h2 id="选择合适的数据类型"><a href="#选择合适的数据类型" class="headerlink" title="选择合适的数据类型"></a>选择合适的数据类型</h2><h3 id="Char和VarChar"><a href="#Char和VarChar" class="headerlink" title="Char和VarChar"></a>Char和VarChar</h3><p>区别：</p><p>char 固定空间大小，且会删除字符串末尾的空格。处理速度比varchar快，浪费空间。</p><p>vachar，存储空间依字符串变化而变化，不会自动删除空格。</p><p>还要根据使用的存储引擎选择。 </p><ul><li>MyISAM：建议使用固定长度的数据列替代可变长度。</li><li>MEMORY：无论使用char或是varchar，都使用固定长度的数据行存储。</li><li>InnoDB：建议使用VarChar。 </li></ul><h3 id="Text和Blob"><a href="#Text和Blob" class="headerlink" title="Text和Blob"></a>Text和Blob</h3><p>保存少量字符串时，使用char和varchar。 而在保存较大文本时，通常会选择text和blob。 </p><p>blob能用来保存 二进制数据，比如照片。而Text只能保存字符数据，比如一篇文章或者日记。 </p><p>sh-3.2# du -sh t.*</p><p> 12K    t.frm</p><p> 19M    t.ibd</p><p>optimize table ， 删除记录存在空洞问题，</p><h3 id="浮点数和定点数"><a href="#浮点数和定点数" class="headerlink" title="浮点数和定点数"></a>浮点数和定点数</h3><p>float、double 浮点数。会四舍五入</p><p>decimal 定点数。 定点数实际上是以字符串形式存放的，所以定点数可以更精确地确保存数据。 会四舍五入</p><p>浮点数存在误差。java中使用bigdecimal</p><p>对货币等对精度敏感的数据，应该使用定点数表示或存储。</p><p>在编程中，如果用到浮点数，要特别注意误差问题，并尽量避免做浮点数比较。 </p><p>注意浮点数中一些特殊值的处理。 </p><h2 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">#创建数据库</span><br><span class="line">DROP DATABASE IF EXISTS Dpro;</span><br><span class="line">CREATE  DATABASE Dpro</span><br><span class="line">CHARACTER SET utf8</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line">USE Dpro;</span><br><span class="line"></span><br><span class="line">#创建部门表</span><br><span class="line">DROP TABLE IF EXISTS Employee;</span><br><span class="line">CREATE TABLE Employee</span><br><span class="line">(id INT NOT NULL PRIMARY KEY COMMENT &apos;主键&apos;,</span><br><span class="line"> name VARCHAR(20) NOT NULL COMMENT &apos;人名&apos;,</span><br><span class="line"> depid INT NOT NULL COMMENT &apos;部门id&apos;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#插入测试数据</span><br><span class="line">INSERT INTO Employee(id,name,depid) VALUES(1,&apos;陈&apos;,100),(2,&apos;王&apos;,101),(3,&apos;张&apos;,101),(4,&apos;李&apos;,102),(5,&apos;郭&apos;,103);</span><br><span class="line"></span><br><span class="line">#创建存储过程</span><br><span class="line">DROP PROCEDURE IF EXISTS Pro_Employee;</span><br><span class="line">DELIMITER $$</span><br><span class="line">CREATE PROCEDURE Pro_Employee(IN pdepid VARCHAR(20),OUT pcount INT )</span><br><span class="line">READS SQL DATA</span><br><span class="line">SQL SECURITY INVOKER</span><br><span class="line">BEGIN</span><br><span class="line">SELECT COUNT(id) INTO pcount FROM Employee WHERE depid=pdepid;</span><br><span class="line"></span><br><span class="line">END$$</span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line">#执行存储过程</span><br><span class="line">CALL Pro_Employee(101,@pcount);</span><br><span class="line"></span><br><span class="line">SELECT @pcount;</span><br></pre></td></tr></table></figure><h2 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h2><h3 id="Range分区"><a href="#Range分区" class="headerlink" title="Range分区"></a>Range分区</h3><p>给定连续范围，把数据分配到不同的分区</p><h3 id="List分区"><a href="#List分区" class="headerlink" title="List分区"></a>List分区</h3><p>类似emun，必须指定出分区的名字。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">create table pageview(</span><br><span class="line">system_type varchar(20)</span><br><span class="line">)partition by list columns(system_type)(</span><br><span class="line">  partition p1 values in (&apos;windows&apos;),</span><br><span class="line">  partition p2 values in (&apos;linux&apos;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="Columns-分区"><a href="#Columns-分区" class="headerlink" title="Columns 分区"></a>Columns 分区</h3><p>是mysql5.5引入的。 </p><p>细分为Range Columns &amp;&amp; List Columns。都支持 整数、日期时间和 字符串三种类型。 </p><h3 id="Hash分区"><a href="#Hash分区" class="headerlink" title="Hash分区"></a>Hash分区</h3><p>基于给定的分区个数，把数据分配到不同分区</p><h3 id="Key分区"><a href="#Key分区" class="headerlink" title="Key分区"></a>Key分区</h3><h2 id="优化SQL"><a href="#优化SQL" class="headerlink" title="优化SQL"></a>优化SQL</h2><h3 id="通过show-status了解SQL的执行频率"><a href="#通过show-status了解SQL的执行频率" class="headerlink" title="通过show status了解SQL的执行频率"></a>通过<code>show status</code>了解SQL的执行频率</h3><p>Mysql客户端连接后，通过<code>show [session|global] status</code>提供服务器状态信息。</p><p>session和global分别显示当前连接的统计信息和自数据库上次启动至今的统计结果。 </p><p>默认是session级别的。</p><p>执行<code>show session status like &#39;Com_%&#39;</code></p><p>重点观察： </p><ul><li>Com_select : 执行Select语句的次数，一次查询累计加1.</li><li>Com_insert : 执行Insert操作的次数，对于批量插入的Insert操作，只累加一次。 </li><li>Com_update : 执行Update操作的次数。</li><li>Com_delete : 执行Delete操作的次数。</li></ul><p>以上，的统计，对于所有存储引擎都会统计。以下，这几个参数支队InnoDB引擎统计：</p><ul><li>Innodb_rows_read : Select查询返回的行数。</li><li>Innodb_rows_inserted : 执行Insert操作插入的行数。</li><li>Innodb_rows_updated : 执行Update操作更新的行数。</li><li>Innodb_rows_deleted : 执行Delete操作删除的行数。 </li></ul><p>通过以上几个参数，可以容易的了解到当前数据库是以插入更新为主还是以查询操作为主。以及各种类型的SQL大致的执行比例是多少。对于更新操作的计数，是对执行次数的计数，不论提交还是回滚都会进行累加。 </p><p>对事务性应用： </p><ul><li>Com_commit : </li><li>Com_rollback : </li></ul><p>可以了解事务提交和回滚的情况，对于回滚操作非常频繁的数据库，可能意味着应用编写存在问题。 </p><ul><li>Connections : 试图连接MySQL服务器的次数</li><li>Uptime : 服务器工作时间</li><li>Slow_queries : 慢查询的次数</li></ul><h3 id="定位执行效率较低的SQL语句"><a href="#定位执行效率较低的SQL语句" class="headerlink" title="定位执行效率较低的SQL语句"></a>定位执行效率较低的SQL语句</h3><ul><li>通过慢查询日志定位，用<code>--log-slow-queries[=file_name]</code>选项启动时，mysqld写一个包含所有执行时间超过<code>long_query_time</code>秒的SQL语句的日志文件。</li><li>慢查询日志在查询结束以后才记录，所以在应用反应执行效率出现问题的时候查询慢查询日志并不能定位问题，可以使用<code>show processlist</code> 命令查看当前MySQL在进行的线程，包括线程的状态、是否锁表等，可以实时地查看SQL的执行情况，同时对一些锁表操作进行优化。 </li></ul><h3 id="通过Explain分析低效SQL的执行计划"><a href="#通过Explain分析低效SQL的执行计划" class="headerlink" title="通过Explain分析低效SQL的执行计划"></a>通过<code>Explain</code>分析低效SQL的执行计划</h3><p>通过上述步骤得到低效率的SQL语句后，可以通过Explain或者Desc命令获取MySQL如何执行Select语句的信息，包括在Select语句执行过程中表如何连接和连接的顺序，比如</p><ul><li><p>select_type : 表示Select的类型，常见的取值有Simple(简单表，即不使用表连接或者子查询)，Primary(主查询，即外层的查询)、Union(Union中第二个或后面的查询语句)、SubQuery(子查询中的第一个Select)等。 </p></li><li><p>table ： 输出结果集的表</p></li><li><p>type ： MySQL根据语句执行时，在表中查找可能用到的方式 ： </p><p><code>|All|index|range|ref|eq_ref|const,system|NULL|</code></p><p>按顺序，性能有差到好。</p><ul><li><p>All ： 全表扫描。MySQL遍历全表来找到匹配的行</p></li><li><p>index ： 索引全扫描。MySQL遍历整个索引查询匹配的行。</p></li><li><p>range ： 索引范围扫描。常见between、&lt;、&gt;、&lt;=等操作。 </p></li><li><p>ref ： 使用非唯一索引扫描或者唯一索引的前缀扫描，返回匹配讴歌单独值的记录行。</p></li><li><p>eq_ref : 类似ref，区别就是使用的索引是唯一索引，对于每个索引键值，表中只有一条记录匹配； primary key 或者 unique index 。</p></li><li><p>const/system ： 单表中最多有一个匹配行，查询起来非常迅速</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">alter table user add unique index uk_name(name);</span><br><span class="line"></span><br><span class="line">explain select * from (select * from user where name=&apos;Jack&apos;); </span><br><span class="line">外层：type ： system</span><br><span class="line">内层： eq_ref </span><br><span class="line"></span><br><span class="line">内层使用name这个唯一索引，所以是eq_ref</span><br><span class="line">外层，使用内层的返回值，值返回了1条，所以是常量级别。</span><br></pre></td></tr></table></figure></li><li><p>NULL : MySQL不用访问表或者索引，直接就能够得到结果，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select 1 from dual where 1;</span><br></pre></td></tr></table></figure></li><li><p>其他如： ref_or_null（与ref类似，区别在于条件中包含对NULL的查询）、index_merge（索引合并优化）、unique_subquery(in的后面是一个查询主见字段的子查询)、index_subquery（与unique_subquer类似，in的后面是查询非唯一索引字段的子查询）等</p></li></ul></li><li><p>possible_keys : 表示查询时可能使用的索引。</p></li><li><p>key ： 表示实际使用的索引。 </p></li><li><p>key_len : 使用到索引字段的长度。</p></li><li><p>rows ： 扫描行的数量。 </p></li><li><p>Extra ： 执行情况的说明和描述，包含不适合在其他列中显示但是对执行计划非常重要的额外信息。 </p></li></ul><p>从4.1开始，引入了explain extended 命令，通过explain extended 后，加上show warnings 能够看到在Sql真正被执行前优化器做了哪些Sql改写。 </p><p>以及，5.1开始支持分区功能，使用 explain partitions 命令查看sql所访问的分区。</p><h3 id="使用show-profile-分析SQL"><a href="#使用show-profile-分析SQL" class="headerlink" title="使用show profile 分析SQL"></a>使用show profile 分析SQL</h3><p>从5.0.37版本开始增加了对show profiles和show profile语句的支持。 </p><p>使用have_profiling  , select @@have_profiling 查看当前使用的MySQL是否支持profile 。 </p><p>且，通过select @@profiling; 可查看开启情况，默认是关闭的。 通过set的session级别开启profiling。 </p><p>通过profile，我们能更清楚的了解到SQL执行过程。 </p><h3 id="通过trace分析优化器如何选择执行计划"><a href="#通过trace分析优化器如何选择执行计划" class="headerlink" title="通过trace分析优化器如何选择执行计划"></a>通过trace分析优化器如何选择执行计划</h3><p>从5.6开始，提供了对SQL的追踪trace，通过trace文件能够进一步了解为什么优化器选择A执行而不是B。</p><h3 id="确定问题并采取相应的优化措施"><a href="#确定问题并采取相应的优化措施" class="headerlink" title="确定问题并采取相应的优化措施"></a>确定问题并采取相应的优化措施</h3><p>比如，全表扫描的，加上索引 。</p><h2 id="索引问题"><a href="#索引问题" class="headerlink" title="索引问题"></a>索引问题</h2><p>索引是数据库优化中最常用也是最重要的手段之一，通过索引通常可以帮助用户解决大多数的SQL性能问题。</p><h3 id="索引的存储分类"><a href="#索引的存储分类" class="headerlink" title="索引的存储分类"></a>索引的存储分类</h3><p>索引是在MySQL的存储引擎中实现的，而不是在服务器层实现的。每种存储引擎的索引都不一完全相同。</p><p>MySQL目前提供了以下4中索引 ： </p><ul><li>B-Tree 索引 ： 最常见的索引类型，大部分引擎都支持</li><li>HASH索引 ： 只有Memory引擎支持，使用场景简单。 </li><li>R-Tree索引(空间索引) ：空间索引是MyISAM的一个特殊索引类型，主要用于地理空间数据类型，实际使用较少。</li><li>Full-text（全文索引）：全文索引也是MyISAM的一个特殊索引类型，主要用于全文索引，Innodb从5.6版本开始提供对全文索引的支持。  </li></ul><p>Hash索引只有Memory支持，且hash索引只有在=条件下才会使用。条件范围查询搜索不会用到hash索引，如between，大于等于，小于等于等都不会用到hash索引。因为hash是对查询的值进行函数变换直接找到内存地址，并没有比较判断的步骤，所以不支持大小比较，也就无法使用范围查询。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter tabel tbl_name add index idx_name(col_name); </span><br><span class="line">alter table tbl_name drop index idx_name;</span><br></pre></td></tr></table></figure><h3 id="MySQL如何使用索引"><a href="#MySQL如何使用索引" class="headerlink" title="MySQL如何使用索引"></a>MySQL如何使用索引</h3><p>B-Tree索引是最常见的索引，构造类似二叉树，能根据键值提供一行或者一个行集的快速访问，通常只需要很少的读操作就可以找到正确的行。B-Tree中的B不是二叉树(Binary)，而是代表平衡树(balanced)。B-Tree不是一颗二叉树？</p><ol><li>MySQL中能够使用索引的典型场景<ol><li>匹配全值(Match the full value)，对索引中所有列都指定具体的值。</li><li>匹配值的范围查询(Match a range of values)，对索引的值能够进行范围查找。</li><li>匹配最左前缀(Match a leftmost prefix)，仅仅使用索引中的最左边列进行查找。是MySQL中B-Tree的首要原则。说明：一个索引(col1+col2+col3)联合索引，能够包含 col1、(col1+col2)、(col1+col2+col3)、(col1+col3)为条件的等值查询时，使用该索引，但使用col2、(col2+col3)等值时，是不会使用该索引的。 </li><li>仅仅对索引进行查询(Index only query)。不仅where语句使用复合索引中的字段，select语句也使用复合索引中的字段。 </li><li>匹配列前缀(Match a column prefix)，仅仅使用索引中的第一列，且值包含索引第一列的开头的一部分进行查找。 如 name like ‘pete%’。</li><li>能够实现索引匹配部分精确而其他部分进行范围匹配(Match one part exactly and match a range on another part)。</li><li>列名是索引，那么使用column_name is null 就会使用索引。</li><li>5.6版本开始支持Index Condition Pushdown （ICP）特性。</li></ol></li><li>存在索引但不会使用的典型场景<ol><li>以%开头的Like查询不能够利用B-Tree索引；执行计划中key的值null表示未使用索引。</li><li>数据类型出现隐式转换的时候也不会使用索引，特别是当列类型是字符串，一定记得在where条件中吧字符串常量值用引号引用起来，否则即便这个列上有索引，MySQL也不会用到，应为MySQL默认吧输入的常量值进行转换后才进行检索。 </li><li>符合索引的情况下，假如查询条件不包含索引列最左边的部分，即不满足最左原则Leftmost，是不会使用复合索引的。 </li><li>如果MySQL估计使用索引比全表扫描更慢，则不适用索引。</li><li>用or分隔开的条件，如果or前的条件中的列有索引，而后面的列中没有索引，那么涉及的索引都不会被用到。 </li></ol></li></ol><h3 id="查看索引使用情况"><a href="#查看索引使用情况" class="headerlink" title="查看索引使用情况"></a>查看索引使用情况</h3><p><code>Handler_read_key</code>的值很高，表示一个行被索引值读到的次数。很低表示索引并没有经常用到。</p><p><code>Handler_read_rnd_next</code>的值高则意味着查询运行低效，并且应该建立索引补救。含义是在数据文件中读下一行的请求书。如果进行大量的表扫描，则通常后面表索引不正确或写入的查询没有利用索引。</p><p>show status like ‘Handler_read%’</p><h2 id="两个简单实用的优化方法"><a href="#两个简单实用的优化方法" class="headerlink" title="两个简单实用的优化方法"></a>两个简单实用的优化方法</h2><h3 id="定期分析表和检查表"><a href="#定期分析表和检查表" class="headerlink" title="定期分析表和检查表"></a>定期分析表和检查表</h3><p>分析语法： </p><p><code>Analyze [Local|No_write_to_binlog] Table tbl_name [,tbl_name]...</code></p><p>用于分析和存储表的关键字分布，分析的结果将可以使得系统得到准确的统计信息，使SQL能够生成正确的执行计划。</p><p>检查表的语法： </p><p><code>Check Table tbl_name [,tbl_name]... [option]...option={Quick|Fast|Medium|Extended|Changed}</code></p><p>检查表的作用是检查一个或多个表是否有错误。 check table 对 MyISAM和InnoDB表有作用。</p><p>也可以用于价差视图是否有错误。</p><h3 id="定期优化表"><a href="#定期优化表" class="headerlink" title="定期优化表"></a>定期优化表</h3><p>优化表语法： </p><p><code>Optimize [Local|No_write_to_binlog] Table tbl_name [,tbl_name] ...</code></p><p>下列情况： 如已经删除了表的一大部分，或者如果已经对含有可变长度的表(含有VarChar、Blob和Text列的表)进行了很多更改，则使用Optimize Table命令来进行表优化。 </p><p>这个命令可以讲表中的空间碎片进行合并，消除由于删除或者更新造成的空间浪费。 </p><p>此命令只对MyISAM、BDB和Innodb表起作用。</p><h2 id="常用SQL优化"><a href="#常用SQL优化" class="headerlink" title="常用SQL优化"></a>常用SQL优化</h2><h3 id="大批量插入数据"><a href="#大批量插入数据" class="headerlink" title="大批量插入数据"></a>大批量插入数据</h3><p>使用load命令导入数据时，适当的设置可以提高导入速度。 </p><p>对MyISAM引擎的表： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Alter table tbl_name Disable Keys;</span><br><span class="line">loading the data ...</span><br><span class="line">Alter table tbl_name Enable Keys;</span><br></pre></td></tr></table></figure><p><code>Disable keys</code>和<code>Enable keys</code>用来打开或关闭MyISAM引擎表的非唯一索引的更新。</p><p>当导入的是空表时，默认就是先导入后创建索引，此时不用进行设置。</p><p>对于Innodb表引擎，上述方式不适用。 </p><ol><li>Innodb表是按照主键的顺序保存的，所以讲导入的数据按照主键的顺序排列，可以有效地提高导入数据的效率。 </li><li>在导入数据前执行Set Unique_checks=0，关闭唯一性校验，在导入结束后执行Set Unique_Checks=1，恢复唯一性校验，可以提高导入的效率。 </li><li>如果应用使用自动提交的方式，建议在导入前执行set Autocommit=0，关闭自动提交。导入结束后再执行set autocommit=1，打开自动提交。</li></ol><h3 id="优化Insert语句"><a href="#优化Insert语句" class="headerlink" title="优化Insert语句"></a>优化Insert语句</h3><p>以下优化方式： </p><ul><li>从同一个客户端插入很多行，应尽量使用多个值表的Insert语句，这种方式将大大缩减客户端和数据库之间的连接、关闭等消耗。<code>Insert into table_name values (),(),()...</code></li><li>从不同的客户端插入很多行，通过使用Insert delayed 语句得到更高的速度。Delayed含义是让Insert语句马上执行，其实数据都被放在内存的队列中，并没有真正的写入磁盘，比每条语句分别插入快的多；Low_priority刚好相反，在所有其他用户对表的额度写完成后才进行插入。</li><li>将索引文件和数据文件分在不同的磁盘上存放</li><li>批量插入，可以通过增加<code>bulk_inset_buffer_size</code>变量值的方法来提高速度，只队MyISAM有效。</li><li>当从一个文本文件装在一个表时，使用Load data infile，比insert快20倍。</li></ul><h3 id="优化Order-By语句"><a href="#优化Order-By语句" class="headerlink" title="优化Order By语句"></a>优化Order By语句</h3><ol><li><p>MySQL两种排序方式： </p><p>第一种：通过<strong>有序索引</strong>，<strong>顺序扫描</strong>直接返回有序数据，使用explain分析时显示为Using Index，不需要额外的排序，操作效率较高。</p><p>第二种：通过对返回数据进行排序，即Filesort排序。所有不是通过索引直接返回排序结果的排序豆角Filesort排序。即通过索引返回的结果集的顺序不是想要的顺序，还需要一次额外的排序。</p><p>优化目标：<strong>尽量减少额外的排序，通过索引直接返回有序数据。</strong>Where条件和orderby使用相同的索引。</p></li><li><p>Filesort的优化</p><p>通过创建合适的索引减少filesort出现。</p><ul><li>两次扫描算法(Two Passes)：第一次去除条件和指针信息，在sort buffer中排序去除的内容，然后根据排序后的指针内容在去扫描，取得数据。内存开销小。</li><li>一次扫描算法(Single Pass) ：一次去除所有满足条件的字段，在sort buffer中进行排序后直接输出结果集。 内存开销比较大，效率比较高。</li></ul><p>MySQL通过比较系统变量max_length_for_sort_data的大小和Query语句取出的字段总大小来判断使用何种方式。</p><p>适当的加大系统变量max_length_for_sort_data的值，能让MySQL选择更优化的filesort算法。</p><p>尽量使用必要的字段，Select具体字段的名称，而不是Select*选择所有字段，可以减少排序区的使用，提高SQL性能。</p></li></ol><h3 id="优化Group-By语句"><a href="#优化Group-By语句" class="headerlink" title="优化Group By语句"></a>优化Group By语句</h3><p>​    默认情况下，MySQL对所有GroupBy col1,col2…的字段进行排序。</p><p>​    如果查询包括GroupBy但用户想要避免排序结果的消耗，则可以指定OrderByNull进制排序。 </p><h3 id="优化嵌套查询"><a href="#优化嵌套查询" class="headerlink" title="优化嵌套查询"></a>优化嵌套查询</h3><p>从4.1开始支持子查询，可以使用select语句创建一个单列的查询结果，把这个结果作为过滤条件用在另一个查询中。但是，有些情况下，可以被更有效率的连接(Join)替代。</p><h3 id="MySQL优化OR条件"><a href="#MySQL优化OR条件" class="headerlink" title="MySQL优化OR条件"></a>MySQL优化OR条件</h3><p>​    对于含有or的查询子句，如果利用索引，则or之间的每个条件列都必须用到索引；如果没有索引，则应该考虑增加索引。</p><p>​    查看执行计划描述，发现MySQL在处理含有or子句的查询时，实际是对or的各个字段分别查询后的结果进行了union操作。 </p><h3 id="优化分页查询"><a href="#优化分页查询" class="headerlink" title="优化分页查询"></a>优化分页查询</h3><ol><li><p>一种优化思路</p><p>在索引上完成排序分页的操作，最后根据主键关联回原表查询所需要的其他列内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select * from user order by name\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        table: user</span><br><span class="line">   partitions: NULL</span><br><span class="line">         type: ALL</span><br><span class="line">possible_keys: NULL</span><br><span class="line">          key: NULL</span><br><span class="line">      key_len: NULL</span><br><span class="line">          ref: NULL</span><br><span class="line">         rows: 3</span><br><span class="line">     filtered: 100.00</span><br><span class="line">        Extra: Using filesort</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; explain select * from user order by name limit 2,1\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        table: user</span><br><span class="line">   partitions: NULL</span><br><span class="line">         type: ALL</span><br><span class="line">possible_keys: NULL</span><br><span class="line">          key: NULL</span><br><span class="line">      key_len: NULL</span><br><span class="line">          ref: NULL</span><br><span class="line">         rows: 3</span><br><span class="line">     filtered: 100.00</span><br><span class="line">        Extra: Using filesort</span><br><span class="line">1 row in set, 1 warning (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; explain select a.id,a.name from user a inner join(select id from user order by name limit 2,1)b on a.id=b.id\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">  select_type: PRIMARY</span><br><span class="line">        table: a</span><br><span class="line">   partitions: NULL</span><br><span class="line">         type: index</span><br><span class="line">possible_keys: PRIMARY</span><br><span class="line">          key: idx_name</span><br><span class="line">      key_len: 62</span><br><span class="line">          ref: NULL</span><br><span class="line">         rows: 3</span><br><span class="line">     filtered: 100.00</span><br><span class="line">        Extra: Using index</span><br><span class="line">*************************** 2. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">  select_type: PRIMARY</span><br><span class="line">        table: &lt;derived2&gt;</span><br><span class="line">   partitions: NULL</span><br><span class="line">         type: ref</span><br><span class="line">possible_keys: &lt;auto_key0&gt;</span><br><span class="line">          key: &lt;auto_key0&gt;</span><br><span class="line">      key_len: 4</span><br><span class="line">          ref: us.a.id</span><br><span class="line">         rows: 2</span><br><span class="line">     filtered: 100.00</span><br><span class="line">        Extra: Using index</span><br><span class="line">*************************** 3. row ***************************</span><br><span class="line">           id: 2</span><br><span class="line">  select_type: DERIVED</span><br><span class="line">        table: user</span><br><span class="line">   partitions: NULL</span><br><span class="line">         type: index</span><br><span class="line">possible_keys: NULL</span><br><span class="line">          key: idx_name</span><br><span class="line">      key_len: 62</span><br><span class="line">          ref: NULL</span><br><span class="line">         rows: 3</span><br><span class="line">     filtered: 100.00</span><br><span class="line">        Extra: Using index</span><br><span class="line">3 rows in set, 1 warning (0.03 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; explain select a.id,a.name from user a inner join(select id from user order by name)b on a.id=b.id\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        table: a</span><br><span class="line">   partitions: NULL</span><br><span class="line">         type: index</span><br><span class="line">possible_keys: PRIMARY</span><br><span class="line">          key: idx_name</span><br><span class="line">      key_len: 62</span><br><span class="line">          ref: NULL</span><br><span class="line">         rows: 3</span><br><span class="line">     filtered: 100.00</span><br><span class="line">        Extra: Using index</span><br><span class="line">*************************** 2. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        table: user</span><br><span class="line">   partitions: NULL</span><br><span class="line">         type: eq_ref</span><br><span class="line">possible_keys: PRIMARY</span><br><span class="line">          key: PRIMARY</span><br><span class="line">      key_len: 4</span><br><span class="line">          ref: us.a.id</span><br><span class="line">         rows: 1</span><br><span class="line">     filtered: 100.00</span><br><span class="line">        Extra: NULL</span><br><span class="line">2 rows in set, 1 warning (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; explain select * from user order by name desc\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        table: user</span><br><span class="line">   partitions: NULL</span><br><span class="line">         type: ALL</span><br><span class="line">possible_keys: NULL</span><br><span class="line">          key: NULL</span><br><span class="line">      key_len: NULL</span><br><span class="line">          ref: NULL</span><br><span class="line">         rows: 3</span><br><span class="line">     filtered: 100.00</span><br><span class="line">        Extra: Using filesort</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">ERROR: </span><br><span class="line">No query specified</span><br><span class="line"></span><br><span class="line">mysql&gt; explain select id from user order by name desc\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        table: user</span><br><span class="line">   partitions: NULL</span><br><span class="line">         type: index</span><br><span class="line">possible_keys: NULL</span><br><span class="line">          key: idx_name</span><br><span class="line">      key_len: 62</span><br><span class="line">          ref: NULL</span><br><span class="line">         rows: 3</span><br><span class="line">     filtered: 100.00</span><br><span class="line">        Extra: Using index</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">ERROR: </span><br><span class="line">No query specified</span><br></pre></td></tr></table></figure><p>直接使用不应用索引，指定select id应用索引，子查询。</p></li><li><p>第二种优化思路</p><p>把limit查询转换成某个位置的查询。 </p><p>针对id连续的记录，可以直接算出本次分页要取得记录的id范围，那么where条件直接写idbetweenand接limitx，而不使用limitm,n。</p></li></ol><h3 id="使用SQL提示"><a href="#使用SQL提示" class="headerlink" title="使用SQL提示"></a>使用SQL提示</h3><p>SQL提示(SQL HINT),是数据库优化的一个重要手段！</p><ol><li><p>Use Index</p><p>使用UseIndex来提供希望MySQL去参考的索引列表，可以让MySQL不再考虑其他可用的索引。 </p><p><code>select * from tbl_name use index(idx_name) where xx=x ordery by xx</code></p><p>MySQL会自动选择是否使用指定的索引，可以不使用。</p></li><li><p>Ignore index</p><p>让MySQL忽略一个或者多个索引，可以使用Ignore Index作为Hint。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from tbl_name ignore index(idx_name) order by xx;</span><br></pre></td></tr></table></figure></li><li><p>Force Index</p><p>强制MySQL使用一个特定的索引，相比于use index，force index更具有强制性。即使MySQL自己认为不该使用此索引，也会使用</p><p><code>select * from tbl_name force index(idx_name) order by xx;</code></p></li></ol><h2 id="常用SQL技巧"><a href="#常用SQL技巧" class="headerlink" title="常用SQL技巧"></a>常用SQL技巧</h2><h3 id="正则表达式的使用"><a href="#正则表达式的使用" class="headerlink" title="正则表达式的使用"></a>正则表达式的使用</h3><p>Regular Expression，用来描述或者匹配符合规则的字符串。熟悉并掌握REGEXP的功能可以使模式匹配工作事半功倍。</p><h3 id="巧用Rand-提取随机行"><a href="#巧用Rand-提取随机行" class="headerlink" title="巧用Rand()提取随机行"></a>巧用Rand()提取随机行</h3><p>随机排序 ： </p><p><code>select * from tbl_name order by rand();</code></p><p>可以将记录随机排序，每次产生的都不一样。 </p><h3 id="利用Group-By-的With-Rollup子句"><a href="#利用Group-By-的With-Rollup子句" class="headerlink" title="利用Group By 的With Rollup子句"></a>利用Group By 的With Rollup子句</h3><p>group by是用于分组，然后返回每组的统计信息。</p><p>加上with rollup，会对每个分组在进行一个‘总计’的统计。</p><p>注：rollup，和orderby 互斥。  limit用在rollup后面。</p><h3 id="用Big-Group-Functions做统计"><a href="#用Big-Group-Functions做统计" class="headerlink" title="用Big Group Functions做统计"></a>用Big Group Functions做统计</h3><h3 id="数据库名、表名大小写问题"><a href="#数据库名、表名大小写问题" class="headerlink" title="数据库名、表名大小写问题"></a>数据库名、表名大小写问题</h3><h3 id="使用外键需要注意的问题"><a href="#使用外键需要注意的问题" class="headerlink" title="使用外键需要注意的问题"></a>使用外键需要注意的问题</h3><h1 id="优化数据库对象"><a href="#优化数据库对象" class="headerlink" title="优化数据库对象"></a>优化数据库对象</h1><h2 id="优化表的数据类型"><a href="#优化表的数据类型" class="headerlink" title="优化表的数据类型"></a>优化表的数据类型</h2><p>MySQL中可以使用Procedure Analyse()对当前应用的表进行分析，作用是对数据表中列的数据类型提出优化建议。</p><p><code>select * from tbl_name procedure analyse();</code></p><p>会给出每个字段的统计值，建议类型等。</p><h2 id="通过拆分高表的访问效率"><a href="#通过拆分高表的访问效率" class="headerlink" title="通过拆分高表的访问效率"></a>通过拆分高表的访问效率</h2><p>对数据表进行拆分。 </p><p>如针对MyISAM类型的表进行，那么有两种拆分方法： </p><ol><li><p>垂直拆分。 把主码和一些列放到一个表，然后把主码和另外的额列放到另一个表中。 </p><p>如果一个表中某些列常用，而另外一些列不常用，则可以采用垂直拆分。 可以使得数据航变小，一个数据页就能存放更多的数据，在查询时就会减少I\O次数，缺点是需要管理冗余列，查询数据需要联合(JOIN)操作。</p></li><li><p>水平拆分，</p><ul><li>表很大，分割后可以降低在查询时需要读的数据和索引的页数，同时也降低了索引的层数，提高查询速度。</li><li>表中的数据本来就有独立性，</li><li>需要把数据存到多个介质上。</li></ul><p>水平拆分会增加应用的复杂度，通常查询时需要多个表名，查询所有数据需要Union操作。</p></li></ol><h2 id="逆规范化"><a href="#逆规范化" class="headerlink" title="逆规范化"></a>逆规范化</h2><h2 id="使用中间表提高统计查询速度"><a href="#使用中间表提高统计查询速度" class="headerlink" title="使用中间表提高统计查询速度"></a>使用中间表提高统计查询速度</h2><h1 id="锁问题"><a href="#锁问题" class="headerlink" title="锁问题"></a>锁问题</h1><blockquote><p>锁是计算机协调多个进程或线程并发访问某一资源的机制。共享的可变对象。</p></blockquote><h2 id="MySQL锁概述"><a href="#MySQL锁概述" class="headerlink" title="MySQL锁概述"></a>MySQL锁概述</h2><p>MyISAM : </p><p><code>lock table tbl_name read|write [local] (,tbl_name read|write [local] ...)</code></p><h1 id="优化MySQL-Server"><a href="#优化MySQL-Server" class="headerlink" title="优化MySQL Server"></a>优化MySQL Server</h1><h2 id="MySQL体系结构概览"><a href="#MySQL体系结构概览" class="headerlink" title="MySQL体系结构概览"></a>MySQL体系结构概览</h2><h2 id="MySQL内存管理及优化"><a href="#MySQL内存管理及优化" class="headerlink" title="MySQL内存管理及优化"></a>MySQL内存管理及优化</h2><h3 id="内存优化原则"><a href="#内存优化原则" class="headerlink" title="内存优化原则"></a>内存优化原则</h3><ul><li>将尽量多的内存分配给MySQL做缓存，但要给操作系统和其他程序的运行预留足够的内存，否则如果产生SWAP页交换，将严重影响系统性能。 </li><li>MyISAM引擎的数据文件读取依赖于操作系统自身的IO缓存，因此，如果有MyISAM表，就要预留更多的内存给操作系统做IO缓存。</li><li>排序区、连接区等缓存是分配给每个数据库回话(Session)专用的，如果设置太大，不但浪费内存资源，而且在并发连接较高时会导致物理内存耗尽。</li></ul><h3 id="MyISAM内存优化"><a href="#MyISAM内存优化" class="headerlink" title="MyISAM内存优化"></a>MyISAM内存优化</h3><blockquote><p>缓存，对于把“数据”从放到内存(from磁盘)中，就叫缓存。</p><p>索引缓存，顾名思义，就是把索引放在内存中，内存的大小。语句需要遍历或者操作索引，就需要把被操作的索引读取到内存块中，且当需要把新的索引放入已经满了的内存块中时，根据对应的策略，删除一部分在内存中的索引腾出空间。 </p></blockquote><ol><li><p>key_buffer_size设置</p><p>决定MyISAM索引块缓存区的大小，直接影响MyISAM表的存取效率。可以再MySQL的参数文件中我设置key_buffer_size的值，建议至少将1/4可用内存分配给key_buffer_size;</p></li><li><p>使用多个索引缓存</p><p>各个session共享key_buffer提高了MyISAM索引存取的性能，但也存在资源竞争。</p><p>从5.1版本开始引入了多索引缓存机制，可以将不同表的索引缓存到不同的key_buffer中。 </p><p><code>set global indexbuffer_name.key_buffer_size=128*1024;</code></p><p>可以创建新的key buffer，index buffer_name是新建索引缓存的名称。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#删除 索引缓存</span><br><span class="line">mysql&gt; set global indexbuffer_name.key_buffer_size=0</span><br><span class="line">#通过 select @@index... 查看</span><br><span class="line">mysql&gt; select @@indexbuffer_name.key_buffer_size;</span><br><span class="line">#查看默认 索引缓存 大小</span><br><span class="line">mysql&gt; show variables like &apos;key_buffer_size&apos;;</span><br></pre></td></tr></table></figure><p>默认情况下，使用默认的key buffer 缓存MyISAM表的索引。使用<code>cache index</code>指定目标表的索引缓存。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; cache index tbl1_name,tbl2_name in indexbuffer_cachename;</span><br></pre></td></tr></table></figure><p>通常情况下，做法是使用配置文件在MySQL启动时自动创建并加载指定索引缓存。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#.ini</span><br><span class="line">key_buffer_size=4G</span><br><span class="line">#indexbuffer_cachename.key_buffer_size=2G</span><br><span class="line">hot_cache.key_buffer_size=1G</span><br><span class="line">cold_cache.key_buffer_size=1G</span><br><span class="line">init_file=/path/mysqld_init.sql</span><br><span class="line"></span><br><span class="line">#mysqld_init.sql</span><br><span class="line">cache index tbl_name in hot_cache;</span><br><span class="line">cache index tbl2_name in cold_cache;</span><br><span class="line">load index into cache tbl_name,tbl2_name;</span><br></pre></td></tr></table></figure></li><li><p>调整过期策略</p><p>默认情况下使用LRU(Least Recently Used)策略来选择要淘汰的索引数据块。</p><p>调整为中点插入策略(Midpoint Insertion Strategy) 。</p></li><li><p>调整read_buffer_size和read_rnd_buffer_size</p><p>经常顺序扫描MyISAM表，可以通过增大read_buffer_size的值改善性能。这个值为每个session独占，设置太大容易造成内存浪费。</p><p>对于需要排序的MyISAM表查询，如带有order by 子句，适当加大read_rd_buffer_size的值。同上，也是每个Session独占。不要设置的太大。</p><p>​</p><p>​</p></li></ol><h3 id="InnoDB内存优化"><a href="#InnoDB内存优化" class="headerlink" title="InnoDB内存优化"></a>InnoDB内存优化</h3><ol><li><p>InnoDB缓存机制</p><p>InnoDB用一块内存区做IO缓存池，该缓存不仅用来缓存InnoDB的索引块，也用来缓存InnoDB的数据块。</p></li><li><p>innodb_buffer_pool_size的设置</p><p>决定最大缓存区的大小。在一个专用数据库服务器上，可以将80%可用内存分配给InnoDB buffer pool，<code>mysqladmin -S /tmp/mysql.sock ext|grep -i innodb_buffer_pool</code>查看bffer pool的使用情况。 </p></li><li><p>调整old sublist 大小 </p><p><code>mysql&gt;show global variables like &#39;%innodb_old_blocks_pct%&#39;;</code></p><p>取值范围是5~95， 默认值是37(约等于3/8)</p></li><li><p>调整innodb_old_blocks_time的设置</p><p>决定了缓存数据块有old sublist转移到young sublist的快慢，</p></li><li><p>调整缓存池数量，减少内部对缓存池数据结构的争用</p><p>innodb_buffer_pool_instances配置参数，InnoDB缓存系统将根据参数innodb_buffer_pool_size指定大小的缓存平分为indoor_buffer_pool_instances个buffer pool。</p></li><li><p>控制innodb buffer刷新，延长数据缓存时间，减缓磁盘IO</p><ul><li>innodb_max_dirty_pages_pct ，控制缓存池中脏页的最大比例，默认值是75%，如果脏页的数量达到或超过该阈值，InnoDB的后台线程开始缓存刷新。</li><li>innodb_io_capacity，代表磁盘系统的io能力，在一定程度上代表磁盘每秒可完成的IO次数。默认值是200，对于转速较低的磁盘，如7200RPM可将值降低到100。对于固态硬盘可适当提高。</li></ul></li><li><p>InnoDB doublewrite</p><p>默认开启，可以通过关闭来提高性能。 </p></li></ol><h3 id="调整用户服务线程排序缓存区"><a href="#调整用户服务线程排序缓存区" class="headerlink" title="调整用户服务线程排序缓存区"></a>调整用户服务线程排序缓存区</h3><p>调整 参数 sort_buffer_size的值增大排序缓存区，改善order by子句和group 子句的SQL性能。 </p><p>对于无法通过索引进行连接操作的查询，可以尝试通过增大 join_buffer_size的值来改善性能。 </p><p>注意，sort buffer和join buffer 都是面向session的，不共享，如果设置过大会造成内存浪费。 </p><p>尤其是join buffer，比较好的策略是设置较小的全局join buffer，对于要做复杂连接的session单独设置较大的join_buffer_size。 </p><h2 id="InnoDB-log-机制及优化"><a href="#InnoDB-log-机制及优化" class="headerlink" title="InnoDB log 机制及优化"></a>InnoDB log 机制及优化</h2><p>采用redo log机制来保证事务更新的一致性和持久性。</p><p>当更新数据时，InnoDB内部操作流程 ： </p><ol><li>将数据读入InnoDB buffer pool ，并对相关记录加独占锁。 </li><li>将UNDO信息写入undo表空间的回滚字段中。 </li><li>更改缓存页中的数据，并将更新记录写入 redo buffer中；</li><li>提交时，根据innodb_flush_log_at_trx_commit的设置，用不同的方式将redo buffer中的更新记录刷新到InnoDB redo log file中，然后释放独占锁。</li><li>最后，后台IO线程根据需要择机将缓存中更新过的数据刷新到磁盘文件中。 </li></ol><h1 id="应用优化"><a href="#应用优化" class="headerlink" title="应用优化"></a>应用优化</h1><h2 id="使用连接池"><a href="#使用连接池" class="headerlink" title="使用连接池"></a>使用连接池</h2><h2 id="减少对MySQL的访问"><a href="#减少对MySQL的访问" class="headerlink" title="减少对MySQL的访问"></a>减少对MySQL的访问</h2><h3 id="避免对同一数据做重复检索"><a href="#避免对同一数据做重复检索" class="headerlink" title="避免对同一数据做重复检索"></a>避免对同一数据做重复检索</h3><h3 id="使用查询缓存"><a href="#使用查询缓存" class="headerlink" title="使用查询缓存"></a>使用查询缓存</h3><p>4.1版本后增加查询缓存(MySQL Query Cache)</p><h3 id="增加Cache层"><a href="#增加Cache层" class="headerlink" title="增加Cache层"></a>增加Cache层</h3><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>负载均衡(Load Balance)是实际应用中使用非常普遍的一种优化方法，它的机制就是利用某种均衡算法，将固定的负载量分不到不同的服务器上，一次来减轻单台服务器的负载，达到优化的目的。</p><h3 id="利用MySQL复制分流查询操作"><a href="#利用MySQL复制分流查询操作" class="headerlink" title="利用MySQL复制分流查询操作"></a>利用MySQL复制分流查询操作</h3><p>用MySQL的主从复制可以有效地分流更新操作和查询操作，一个主服务器承担更新操作，而多台服务器承担查询操作，主从之间通过复制实现数据的同步。多台子从服务器一方面用来确保可用性，一方面可以创建不同的索引以满足不同查询的需要。 </p><h3 id="采用分布式数据库架构"><a href="#采用分布式数据库架构" class="headerlink" title="采用分布式数据库架构"></a>采用分布式数据库架构</h3><p>MySQL的Cluster功能。 </p><h2 id="其他优化措施"><a href="#其他优化措施" class="headerlink" title="其他优化措施"></a>其他优化措施</h2><ul><li>对于没有删除操作的MyISAM表，插入操作和查询操作可以并行进行。</li><li>充分利用列的默认值，只有当插入的值不同于默认值时，才明确的插入值。</li><li>表字段尽量不使用自增长变量。 </li></ul><h1 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h1><h2 id="错误日志"><a href="#错误日志" class="headerlink" title="错误日志"></a>错误日志</h2><h2 id="二进制日志-改、删操作日志"><a href="#二进制日志-改、删操作日志" class="headerlink" title="二进制日志(改、删操作日志)"></a>二进制日志(改、删操作日志)</h2><h3 id="开启"><a href="#开启" class="headerlink" title="开启"></a>开启</h3><p>flush logs</p><p>MySQL5.7 中 my.cnf 配置： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">log_bin #开启binlog</span><br><span class="line">binlog_format=MIXED #设置binlog内容默认，raw和可读sql混合制</span><br><span class="line"></span><br><span class="line">log_error = /usr/local/mysql/data/mysql-error.log #设置logerror文件位置</span><br><span class="line">port = 3306</span><br><span class="line">server_id = 127</span><br><span class="line">socket = /tmp/mysql.sock</span><br></pre></td></tr></table></figure><p>开启二进制日志(用于记录修改删除操作的日志，可用于主从分布)。</p><p>错误日志是必须开启的默认开启，使用默认的文件名和位置，可用log_error指定。 </p><p>使用 mysqlbinlog 命令查看二进制日志。 </p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><h4 id="全部删除"><a href="#全部删除" class="headerlink" title="全部删除"></a>全部删除</h4><p>MySQL 客户端执行 <code>Reset Master</code>命令，会将当前所有的日志文件删除，从1开始从新记录。 </p><h4 id="根据-编号-删除"><a href="#根据-编号-删除" class="headerlink" title="根据 编号 删除"></a>根据 编号 删除</h4><p><code>mysql&gt; purge master logs to &#39;mysql-bin.******&#39;</code></p><p>将删除<code>******</code>编号前的日志。</p><p><code>mysql&gt; purge master logs to &#39;localhost-bin.000006&#39;</code></p><h4 id="根据日期删除"><a href="#根据日期删除" class="headerlink" title="根据日期删除"></a>根据日期删除</h4><p><code>mysql&gt; purge master logs before &#39;yyyy-mm-dd hh24:mi:ss&#39;</code></p><p>删除指定日期时间前的所有日志。 </p><p><code>mysql&gt; purge master logs before &#39;2017-01-20 12:12:12&#39;</code></p><h4 id="配置自动删除"><a href="#配置自动删除" class="headerlink" title="配置自动删除"></a>配置自动删除</h4><p>设置参数<code>--expire_logs_days=#</code></p><p>设置日志的过期天数，过了指定天后，日志自动删除。</p><p>在my.cnf中，[mysqld]加入 <code>expire_logs_day=3</code>，重启MySQL服务。 </p><h1 id="MySQL权限"><a href="#MySQL权限" class="headerlink" title="MySQL权限"></a>MySQL权限</h1><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p>MySQL是通过IP和用户名联合进行确认的， 如 root@localhost表示用户root只能从本地(localhost)登陆才可以通过认证。 </p><p>存取过程： </p><ul><li>对连接的用户进行身份认证，合法的用户通过认证。</li><li>对通过认证的用户，赋予相应的权限。用户可以在指定数据库的指定表的指定列有指定的增删改查或DDL权限</li></ul><p>用户信息和权限信息保存在数据库<code>mysql</code>的 user、host和db三个重要的权限表中。 </p><h1 id="MySQL复制"><a href="#MySQL复制" class="headerlink" title="MySQL复制"></a>MySQL复制</h1><p>从3.23版本开始提供复制功能。</p><p>指将主数据库的DDL和DML操作通过二进制日志传到从库上，然后在从库上对这些日志进行重新执行，使得从库和主库的数据保持同步。 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;content&lt;br&gt;{:toc}&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;数据库并发。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;数据库并发&quot;&gt;&lt;a href=&quot;#数据库并发&quot; class=&quot;headerlink&quot; title=&quot;数据库
      
    
    </summary>
    
      <category term="数据库" scheme="http://peterjiao.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库 MySQL" scheme="http://peterjiao.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93-MySQL/"/>
    
  </entry>
  
  <entry>
    <title>字符集，编码</title>
    <link href="http://peterjiao.com/2016/12/12/2016-12-12-%E5%8E%9F%E7%90%86--%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/"/>
    <id>http://peterjiao.com/2016/12/12/2016-12-12-原理--字符编码/</id>
    <published>2016-12-12T14:09:25.000Z</published>
    <updated>2017-02-08T07:27:40.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><blockquote><p>字符集，编码 深度理解。</p></blockquote><h1 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h1><p>2017年01月11日16:58:50</p><p>查了目前所有的汉字，接近9W。 常用字3500。 </p><p>所以，2字节是不能存下所有汉字的，2字节0~25536。 </p><p>utf-8中使用3字节存汉字，24次方，16777216， 接近1k7百万。 </p><p>能够存下所有汉字。 </p><p>UTF-8</p><p>采用了一种变长技术，每个编码区域有不同的字码长度，不同类型的字符可以由1~6个字节组成。 </p><ul><li>某个字节，最高位(第8位)是0，表示这个一个ASCII字符(00~7F)。所以，ASCII就已经是UTF-8了。 </li><li>某个字节，以11开头，连续的1的个数表示了这个字符的字节数。如：110xxxxx，表示有两个字节组成一个字符，且是首字节。注：第n+1位设置为0。</li><li>某个字节，以10开头，表示这个字节不是首字节，需要向前查找才能得到当前字符的首字节。 </li></ul><p>ASCII</p><p>1个字节表示，且首位是0，实际上只用了7位，128个位置。 </p><p>ISO-8859-1 </p><p>是ASCII的扩展，用了256位</p><p>GB2312</p><p>双字节编码，包含682个符号和6763个汉字。 </p><p>GBK</p><p>为了扩展GB2312， 能表示21003个汉字 </p><p>GB18030</p><p>可能是单字节，双字节或四字节，与GB2312编码兼容</p><p>UTF-16</p><p>双字节编码，指定双字节。 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;content&lt;br&gt;{:toc}&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;字符集，编码 深度理解。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;编码&quot;&gt;&lt;a href=&quot;#编码&quot; class=&quot;headerlink&quot; title=&quot;编码&quot;
      
    
    </summary>
    
      <category term="IO/NIO" scheme="http://peterjiao.com/categories/IO-NIO/"/>
    
    
      <category term="IO 字符集" scheme="http://peterjiao.com/tags/IO-%E5%AD%97%E7%AC%A6%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>Java IO,NIO,AIO</title>
    <link href="http://peterjiao.com/2016/12/12/2016-12-12-%E6%B5%81--Java%20IO,NIO,AIO:%20Netty/"/>
    <id>http://peterjiao.com/2016/12/12/2016-12-12-流--Java IO,NIO,AIO: Netty/</id>
    <published>2016-12-12T13:16:19.000Z</published>
    <updated>2018-04-04T06:37:49.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><blockquote><p>Java IO,NIO,AIO。</p></blockquote><h1 id="Java-IO-NIO-AIO-Netty"><a href="#Java-IO-NIO-AIO-Netty" class="headerlink" title="Java IO,NIO,AIO/ Netty"></a>Java IO,NIO,AIO/ Netty</h1><h2 id="Java-IO"><a href="#Java-IO" class="headerlink" title="Java IO"></a>Java IO</h2><p>分组： </p><p>基于字节操作：InputStream OutputStream</p><p>基于字符操作：Writer Reader</p><p>基于磁盘操作：File</p><p>基于网络操作：Socket</p><h2 id="BIO"><a href="#BIO" class="headerlink" title="BIO"></a>BIO</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> port = <span class="number">8080</span>;</span><br><span class="line"></span><br><span class="line">ServerSocket server = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">server = <span class="keyword">new</span> ServerSocket(port);</span><br><span class="line"></span><br><span class="line">Socket socket = <span class="keyword">null</span>; </span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">socket = server.accept();</span><br><span class="line">System.out.println(<span class="string">"get one connected!"</span>);</span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> TimeServerHandler(socket)).start();</span><br><span class="line">&#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>通过<code>ServerSocket</code> 监听端口，使用<code>accept</code>方法，阻塞等待新接入的连接，并生成<code>Socket</code>与之进行通信。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> port = <span class="number">8080</span>;</span><br><span class="line"></span><br><span class="line">Socket socket = <span class="keyword">null</span>;</span><br><span class="line">BufferedReader in = <span class="keyword">null</span>;</span><br><span class="line">PrintWriter out = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">socket = <span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>, port);</span><br><span class="line">in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(socket.getInputStream()));</span><br><span class="line"></span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">out = <span class="keyword">new</span> PrintWriter(socket.getOutputStream(), <span class="keyword">true</span>);</span><br><span class="line">out.println(<span class="string">"Time"</span>);</span><br><span class="line">System.out.println(<span class="string">"Sent order success!"</span>);</span><br><span class="line">String rep = in.readLine();</span><br><span class="line">System.out.println(<span class="string">"Now is : "</span> + rep);</span><br></pre></td></tr></table></figure><p><code>Socket</code>使用host和port实例化后，就会触发<code>ServerSocket</code>的<code>accept</code>方法，构成与Server的通信。 </p><p>后面的就是两个Socket之间的通信了。 </p><p>通过<code>Socket</code>获取的inputstream，使用的read方法也是阻塞的。 </p><p>当客户端方发送请求或者应答比较缓慢，或者网络比较慢时，服务端读取输入流方的通信线程将被长时间阻塞，且不被释放，而其他的接入消息只能在消息队列中等待。  </p><p>每个连接在服务端会新建一个线程与其对应，当连接端关闭后，线程运行完毕。 </p><p>但是，连接端发送大量数据或者网络较慢，接收慢的时候，线程会一直处于阻塞状态，不会消失。 如此，会导致服务端有大量线程，无法应对高并发的情况。 </p><h2 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h2><p>Not Block IO, 非阻塞IO。 </p><p>阻塞，就是等待、不动直到某个条件才继续。 </p><p>如Java中的scan，用于接受控制台输入，否则程序就不向下执行。 </p><p>BIO中serverSocket的accept就是阻塞的，等待，直到有一个socket接入 。 </p><p>而NIO中，是通过selector的轮询</p><p>多路复用器</p><p>Selector会不断地轮询注册在其上的Channel，如果某个Channel上面发生读或者写事件，这个Channel就处于就绪状态，会被Selector轮询出来， </p><p>目前来看，是为多路复用器开启一个线程， 没来一个连接，都会注册到这个多路复用器Selector上，连接和Selector产生关联， 然后 Selector会遍历将 读或者写 处于就绪状态的连接放入一个集合返回，针对这个集合进行下一步操作。 </p><p>这样就不存在一个连接对应一个线程的情况，省去了多线程阻塞等待读或者写就绪的情况，当读或者写就绪的时候，通过Selector获取。 </p><p>最多由该服务器的最大句柄数控制。 </p><p>还有，Nio使用Channel进行读写，和Bio使用Stream不同，Bio读写分开(Input和Output)，而Channel是同时可以读和写的。 </p><h2 id="AIO"><a href="#AIO" class="headerlink" title="AIO"></a>AIO</h2><h2 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h2><p>使用Netty开发一个聊天室</p><p>使用反射开发一个Mvc框架</p><p>放到Github上， 学习 Maven打包 </p><p>了解Guvvo这个打包工具 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;content&lt;br&gt;{:toc}&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Java IO,NIO,AIO。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Java-IO-NIO-AIO-Netty&quot;&gt;&lt;a href=&quot;#Java-IO-NI
      
    
    </summary>
    
      <category term="IO/NIO" scheme="http://peterjiao.com/categories/IO-NIO/"/>
    
    
      <category term="IO/NIO IO" scheme="http://peterjiao.com/tags/IO-NIO-IO/"/>
    
  </entry>
  
  <entry>
    <title>测试--测试框架学习</title>
    <link href="http://peterjiao.com/2016/11/15/2016-11-15-%E6%B5%8B%E8%AF%95/"/>
    <id>http://peterjiao.com/2016/11/15/2016-11-15-测试/</id>
    <published>2016-11-15T12:16:15.000Z</published>
    <updated>2017-02-08T07:33:36.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><blockquote><p>测试框架学习。</p></blockquote><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><h4 id="被测系统-SUT-System-Under-Test"><a href="#被测系统-SUT-System-Under-Test" class="headerlink" title="被测系统 SUT (System Under Test)"></a>被测系统 SUT (System Under Test)</h4><p>表示正在测试的系统，目的是测试系统能否正确操作。</p><ul><li><p>Dummy Object </p><p>泛指在测试中必须传入的对象。</p></li><li><p>Test Stub</p><p>测试桩，用来接收SUT内部的间接输入，并返回特定的值给SUT。</p></li><li><p>Test Spy</p><p>像一个间谍，安插在SUT内部，负责将SUT的间接输出传到外部。</p></li><li><p>Mock Object</p><p>和Spy类似，且Mock还负责对输出进行验证。</p></li><li><p>Fake Object</p></li></ul><h4 id="测试夹具-Test-Fixture"><a href="#测试夹具-Test-Fixture" class="headerlink" title="测试夹具 Test Fixture"></a>测试夹具 Test Fixture</h4><p>即 测试运行程序，会在运行目标测试方法之前自动初始化、资源回收的工作。</p><h4 id="测试用例-Test-Case"><a href="#测试用例-Test-Case" class="headerlink" title="测试用例 Test Case"></a>测试用例 Test Case</h4><h4 id="测试套件-Test-Suite"><a href="#测试套件-Test-Suite" class="headerlink" title="测试套件 Test Suite"></a>测试套件 Test Suite</h4><p>如果每次只能运行一个测试用例，则和传统的使用<code>main()</code>方法进行测试没有区别。手工去一个个执行测试用例，非常繁琐低效。测试套件，即将多个测试用例组装成一个测试套件，测试套件批量运行测试用例。</p><h4 id="断言-Assertions"><a href="#断言-Assertions" class="headerlink" title="断言 Assertions"></a>断言 Assertions</h4><h2 id="JUnit-4"><a href="#JUnit-4" class="headerlink" title="JUnit 4"></a>JUnit 4</h2><p>各个方法之间相互独立 ，一个方法的失败不会导致别的方法失败，方法之间不存在相互依赖的关系，彼此独立。</p><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p>类级初始化资源处理、【方法级初始化资源处理、执行测试用例中的方法、方法级销毁资源处理】、类级销毁资源处理。</p><p>类级别的初始化和销毁，一个测试用例类中只执行一次。</p><p>方法级别初始化和销毁，执行测试用例中每个测试方法中都会执行一次，以防止测试方法相互间的影响。</p><p>测试类中，支持有多个初始化或销毁方法。执行顺序是：多个初始化方法，由后向前。多个销毁方法，由前向后。 </p><h3 id="使用-JUnit-4"><a href="#使用-JUnit-4" class="headerlink" title="使用 JUnit 4"></a>使用 JUnit 4</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">maven:</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="测试方法"><a href="#测试方法" class="headerlink" title="测试方法"></a>测试方法</h4><p><code>@Test</code>标注。</p><p><code>@BeforeClass</code></p><p><code>@Before</code></p><p><code>@Test</code></p><p><code>@After</code></p><p><code>@AfterClass</code></p><p><code>@Test(expected=NullPointerException.class)</code></p><p>超时测试</p><p><code>@Test(timeout=10)</code></p><p>参数化测试</p><p><code>@RunWith(Parameterized.class)</code></p><p>测试运行器</p><p>通过<code>@RunWith(Xxx.class)</code>指定</p><p>所有测试方法都由测试运行器负责执行，且JUnit默认使用<code>BlockJUnit4ClassRunner</code>，且可以自己定制运行器。 一般情况下默认的足够，但当使用一些高级特性时，如 从参数化测试、套件测试时，需要显示指定所用的运行器。 通过<code>@RunWith(Xxx.class)</code>指定。</p><p>测试套件</p><p><code>@RunWith(Suite.class)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.junit.runners.Suite;</span><br><span class="line"><span class="keyword">import</span> org.junit.runners.Suite.SuiteClasses;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(Suite.class)</span><br><span class="line"><span class="meta">@SuiteClasses</span>(PersonTest.class,Xxx.class,Xxxx.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Junit4SuiteTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Junit 4 断言</p><h2 id="模拟利器-Mockito"><a href="#模拟利器-Mockito" class="headerlink" title="模拟利器 Mockito"></a>模拟利器 Mockito</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;content&lt;br&gt;{:toc}&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;测试框架学习。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;测试&quot;&gt;&lt;a href=&quot;#测试&quot; class=&quot;headerlink&quot; title=&quot;测试&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
      <category term="测试" scheme="http://peterjiao.com/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="测试" scheme="http://peterjiao.com/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>工具--Log4j工具</title>
    <link href="http://peterjiao.com/2016/11/02/2016-11-02-%E5%B7%A5%E5%85%B7%E5%8C%85--Log4j/"/>
    <id>http://peterjiao.com/2016/11/02/2016-11-02-工具包--Log4j/</id>
    <published>2016-11-02T12:36:01.000Z</published>
    <updated>2017-02-08T07:30:02.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><blockquote><p>Log4j工具类。</p></blockquote><h1 id="Log4j"><a href="#Log4j" class="headerlink" title="Log4j"></a>Log4j</h1><h2 id="xml"><a href="#xml" class="headerlink" title="xml"></a>xml</h2><p>appenders：输出位置</p><h3 id="loggers"><a href="#loggers" class="headerlink" title="loggers"></a>loggers</h3><p><code>&lt;logger&gt;</code>元素标记配置，必须有<code>name</code>属性，可选<code>level</code>,<code>additivity</code>。 </p><p>可以配置一个到多个子元素<code>&lt;appender-ref&gt;</code>，当发生logevent时，每一个appender都会被调用。 </p><p>每一个configuration，都必须有一个root logconfig，如果不显示指定，默认。 </p><h3 id="appender"><a href="#appender" class="headerlink" title="appender"></a>appender</h3><p>使用特殊的appender元素标记，或者使用<code>appender</code>元素标记，且指定<code>type</code>属性。 </p><p>必须有<code>name</code>属性，且唯一。提供给logger使用。 </p><p>一些appender可以有自定义的layout子元素标记，关于layout元素标记，可以使用特殊的layout元素标记，也可以使用带有<code>type</code>属性的<code>layout</code>标记。 </p><h3 id="filters"><a href="#filters" class="headerlink" title="filters"></a>filters</h3><p>可以出现在4个位置： </p><ol><li>在和appenders，loggers，properties 元素的同级别。 过滤选择接受或拒绝在传入logconfig之前。 </li><li>logger元素的子元素。 接受或拒绝特定的logger元素。 </li><li>在appender元素的子元素。 </li><li>在appender引用的元素中。 用于确定logevent是否应该从logger路由到appender 。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">Configuration</span> <span class="attr">status</span>=<span class="string">"debug"</span> <span class="attr">name</span>=<span class="string">"XMLConfigTest"</span> <span class="attr">packages</span>=<span class="string">"org.apache.logging.log4j.test"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Property</span> <span class="attr">name</span>=<span class="string">"filename"</span>&gt;</span>target/test.log<span class="tag">&lt;/<span class="name">Property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"trace"</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">"STDOUT"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"%m MDC%X%n"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Console</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">"FLOW"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- this pattern outputs class name and line number --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"%C&#123;1&#125;.%M %m %ex%n"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">filters</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">MarkerFilter</span> <span class="attr">marker</span>=<span class="string">"FLOW"</span> <span class="attr">onMatch</span>=<span class="string">"ACCEPT"</span> <span class="attr">onMismatch</span>=<span class="string">"NEUTRAL"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">MarkerFilter</span> <span class="attr">marker</span>=<span class="string">"EXCEPTION"</span> <span class="attr">onMatch</span>=<span class="string">"ACCEPT"</span> <span class="attr">onMismatch</span>=<span class="string">"DENY"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">filters</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Console</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">File</span> <span class="attr">name</span>=<span class="string">"File"</span> <span class="attr">fileName</span>=<span class="string">"$&#123;filename&#125;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">PatternLayout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d %p %C&#123;1.&#125; [%t] %m%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">PatternLayout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">File</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">List</span> <span class="attr">name</span>=<span class="string">"List"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">List</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Logger</span> <span class="attr">name</span>=<span class="string">"org.apache.logging.log4j.test1"</span> <span class="attr">level</span>=<span class="string">"debug"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ThreadContextMapFilter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">KeyValuePair</span> <span class="attr">key</span>=<span class="string">"test"</span> <span class="attr">value</span>=<span class="string">"123"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ThreadContextMapFilter</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Logger</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">Logger</span> <span class="attr">name</span>=<span class="string">"org.apache.logging.log4j.test2"</span> <span class="attr">level</span>=<span class="string">"debug"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Property</span> <span class="attr">name</span>=<span class="string">"user"</span>&gt;</span>$&#123;sys:user.name&#125;<span class="tag">&lt;/<span class="name">Property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">"File"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ThreadContextMapFilter</span>&gt;</span>    **4**</span><br><span class="line">          <span class="tag">&lt;<span class="name">KeyValuePair</span> <span class="attr">key</span>=<span class="string">"test"</span> <span class="attr">value</span>=<span class="string">"123"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ThreadContextMapFilter</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">AppenderRef</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span> <span class="attr">level</span>=<span class="string">"error"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Logger</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">Root</span> <span class="attr">level</span>=<span class="string">"trace"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">"List"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Root</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="含有properties的配置"><a href="#含有properties的配置" class="headerlink" title="含有properties的配置"></a>含有properties的配置</h3><h3 id="Propery属性"><a href="#Propery属性" class="headerlink" title="Propery属性"></a>Propery属性</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;content&lt;br&gt;{:toc}&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Log4j工具类。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Log4j&quot;&gt;&lt;a href=&quot;#Log4j&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
      <category term="框架和包" scheme="http://peterjiao.com/categories/%E6%A1%86%E6%9E%B6%E5%92%8C%E5%8C%85/"/>
    
    
      <category term="Log4j" scheme="http://peterjiao.com/tags/Log4j/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis--基础</title>
    <link href="http://peterjiao.com/2016/11/02/2016-11-02-Mybatis--%E5%9F%BA%E7%A1%80/"/>
    <id>http://peterjiao.com/2016/11/02/2016-11-02-Mybatis--基础/</id>
    <published>2016-11-02T12:06:05.000Z</published>
    <updated>2017-02-08T07:29:24.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><blockquote><p>Mybatis基础。</p></blockquote><h1 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h1><h2 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h2><h3 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"org/mybatis/example/config.properties"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"dev_user"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"F2Fa3!33TYyg"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过<code>resource</code>属性，可以读取properties文件里的配置</p><h2 id="Mapper-XML-文件"><a href="#Mapper-XML-文件" class="headerlink" title="Mapper XML 文件"></a>Mapper XML 文件</h2><h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span></span></span><br><span class="line"><span class="tag">  <span class="attr">id</span>=<span class="string">"selectPerson"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">parameterType</span>=<span class="string">"int"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">resultType</span>=<span class="string">"hashmap"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">resultMap</span>=<span class="string">"personResultMap"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">flushCache</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">useCache</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">timeout</span>=<span class="string">"10000"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">fetchSize</span>=<span class="string">"256"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">statementType</span>=<span class="string">"PREPARED"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">resultSetType</span>=<span class="string">"FORWARD_ONLY"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>flushCache,清空本地缓存和二级缓存。default false。</p><p>useCache，本条语句的结果被二级缓存。 </p><p>fetchSize，每次批量返回的结果行数</p><p>statementType，STATEMENT,PREPARED,CALLABLE使用<code>Statement</code>,<code>PreparedStatement</code>,<code>CallableStatement</code>之一。默认PREPARED.  </p><h3 id="insert，update和delete"><a href="#insert，update和delete" class="headerlink" title="insert，update和delete"></a>insert，update和delete</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span></span></span><br><span class="line"><span class="tag">  <span class="attr">id</span>=<span class="string">"insertAuthor"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">parameterType</span>=<span class="string">"domain.blog.Author"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">flushCache</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">statementType</span>=<span class="string">"PREPARED"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">keyProperty</span>=<span class="string">""</span></span></span><br><span class="line"><span class="tag">  <span class="attr">keyColumn</span>=<span class="string">""</span></span></span><br><span class="line"><span class="tag">  <span class="attr">useGeneratedKeys</span>=<span class="string">""</span></span></span><br><span class="line"><span class="tag">  <span class="attr">timeout</span>=<span class="string">"20"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span></span></span><br><span class="line"><span class="tag">  <span class="attr">id</span>=<span class="string">"updateAuthor"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">parameterType</span>=<span class="string">"domain.blog.Author"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">flushCache</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">statementType</span>=<span class="string">"PREPARED"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">timeout</span>=<span class="string">"20"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span></span></span><br><span class="line"><span class="tag">  <span class="attr">id</span>=<span class="string">"deleteAuthor"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">parameterType</span>=<span class="string">"domain.blog.Author"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">flushCache</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">statementType</span>=<span class="string">"PREPARED"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">timeout</span>=<span class="string">"20"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>flushCache，任何时候只要语句被调用，都会导致本地缓存和二级缓存被清空。default true。 </p><p>useGeneratedKeys，insert和update，使用JDBC的getGeneratedKeys，取出数据库内部生成的主键。</p><p>keyProperty，对insert和update，</p><h4 id="selectKey"><a href="#selectKey" class="headerlink" title="selectKey"></a>selectKey</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">selectKey</span></span></span><br><span class="line"><span class="tag">  <span class="attr">keyProperty</span>=<span class="string">"id"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">resultType</span>=<span class="string">"int"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">order</span>=<span class="string">"BEFORE"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">statementType</span>=<span class="string">"PREPARED"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>keyProperty，目标值</p><p>resultType，结果类型，作为主键的类型。 </p><p>order，BEFORE或AFTER，首先选择主键，然后执行插入语句。先执行插入语句，</p><h3 id="Sql"><a href="#Sql" class="headerlink" title="Sql"></a>Sql</h3><p>定义可重用的sql代码，可以包含在其他语句中。 </p><p>类似于<code>&lt;properties&gt;</code>里声明的， 可以在其他地方使用形如<code>${xx}</code>的形式写入。 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"userColumns"</span>&gt;</span></span><br><span class="line">$&#123;alias&#125;.id,$&#123;alias&#125;.name,$&#123;alias&#125;.password</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUsers"</span> <span class="attr">resultType</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">select </span><br><span class="line">  <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"userColumns"</span>&gt;</span><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"alias"</span> <span class="attr">value</span>=<span class="string">"t1"</span>/&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">  from table1 t1</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"sometable"</span>&gt;</span></span><br><span class="line">  $&#123;prefix&#125;Table</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"someinclude"</span>&gt;</span></span><br><span class="line">  from</span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"$&#123;include_target&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"select"</span> <span class="attr">resultType</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">  select</span><br><span class="line">    field1, field2, field3</span><br><span class="line">  <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"someinclude"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"Some"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"include_target"</span> <span class="attr">value</span>=<span class="string">"sometable"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a>Parameters</h3><p>是指#{}。 </p><p>/Users/liqianlong/peter/springside4-4.2.3.GA/springside4-4.2.3.GA/modules/core/target</p><p>springside-core-4.2.3-GA.jar</p><p>mvn install:install-file -Dfile=/Users/liqianlong/peter/springside4-4.<a href="http://2.3.GA/springside4-4.2.3.GA/modules/core/target" target="_blank" rel="noopener">2.3.GA/springside4-4.2.3.GA/modules/core/target</a>/springside-core-4.2.3-GA.jar -DgroupId=org.springside -DartifactId=springside-core -Dversion=4.2.3-GA -Dpackaging=jar</p><h3 id="Result-Maps"><a href="#Result-Maps" class="headerlink" title="Result Maps"></a>Result Maps</h3><p>解决 <strong>数据库字段</strong> 到 <strong>类属性</strong> 之间的映射关系。 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userResultMap"</span> <span class="attr">type</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"user_id"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"username"</span> <span class="attr">column</span>=<span class="string">"user_name"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"password"</span> <span class="attr">column</span>=<span class="string">"hashed_password"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUsers"</span> <span class="attr">resultMap</span>=<span class="string">"userResultMap"</span>&gt;</span></span><br><span class="line">select user_id,user_name,hashed_password</span><br><span class="line">  from table1</span><br><span class="line">  where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>更复杂，更强大： </p><p>概述： </p><p>resultMap： </p><ul><li>constructor - 构造方法的参数</li><li><ul><li>idArg - Id参数；</li><li>arg - 普通参数</li></ul></li><li>id - 一个ID参数。 </li><li>result - 对应一个普通的字段结果</li><li>association - 复杂的类型关联</li><li><ul><li>嵌入结果映射 - 仅用一次的</li></ul></li><li>collection - 集合类型</li><li><ul><li>嵌入结果映射 - 仅用一次的</li></ul></li><li>discriminator - 使用结果值来决定使用哪个结果映射</li><li><ul><li>case - 基于某些值的结果映射</li><li><ul><li>嵌入结果映射 - </li></ul></li></ul></li></ul><p><code>&lt;resultmap&gt;</code>标记的属性： </p><p>id，</p><p>type，一个类的全限定名称或别名。 指代这个resultmap描述的是哪个类。 </p><p>autoMapping，默认unset</p><h4 id="id-amp-result"><a href="#id-amp-result" class="headerlink" title="id &amp; result"></a>id &amp; result</h4><p>id和result 都映射一个单独的列的值到简单数据类型(String,int,double,date等)的单独属性或字段。 </p><p>id和result，唯一区别是，id表示的是主键。可能用于比较对象实例时用到的标识属性。 </p><p>属性： </p><p>property ： 类中的属性名</p><p>column ：  数据库表中的字段名</p><p>javaType ： </p><p>jdbcType ： </p><p>typeHandler ： </p><h4 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h4><p>resultMap目的是返回一个类的实例， 可以通过constructor来应用对应的构造方法，用于创建这个要返回的实例。 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">constructor</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">idArg</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">javaType</span>=<span class="string">"int"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">arg</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">javaType</span>=<span class="string">"String"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">constructor</span>&gt;</span></span><br><span class="line"></span><br><span class="line">public class User &#123;</span><br><span class="line">  </span><br><span class="line">  public User(int id,String username)&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="association"><a href="#association" class="headerlink" title="association"></a>association</h4><p>映射的不是一个简单数据类型， 而是一个类。 需要使用<code>association</code>元素标记，表示关联的意思。 </p><p>property： 对应java类中的属性名称</p><p>column： 对应数据库表的id字段的名称</p><p>javaType： 对应java类中属性的类型。 </p><p>有两种可能 ： </p><ol><li>嵌套关联查询 ： </li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"blogResult"</span> <span class="attr">type</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"author"</span> <span class="attr">javaType</span>=<span class="string">"Author"</span> <span class="attr">column</span>=<span class="string">"authod_id"</span> <span class="attr">select</span>=<span class="string">"selectAuthorById"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectAuthorById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"Author"</span>&gt;</span></span><br><span class="line">select * </span><br><span class="line">  from p_author</span><br><span class="line">  where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectBlogById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultMap</span>=<span class="string">"blogResult"</span>&gt;</span></span><br><span class="line">select * </span><br><span class="line">  from p_blog</span><br><span class="line">  where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上述形式， 通过blog的id查询blog记录，blog属于一个作者，通过关联查询，有再次执行sql语句查询author的记录。 </p><ol start="2"><li>​</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"authorResult"</span> <span class="attr">type</span>=<span class="string">"Author"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"author_id"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"author_name"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"email"</span> <span class="attr">column</span>=<span class="string">"author_email"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"blogResult"</span> <span class="attr">type</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"blog_id"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"title"</span> <span class="attr">column</span>=<span class="string">"blog_title"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"author"</span> <span class="attr">javaType</span>=<span class="string">"Author"</span> <span class="attr">column</span>=<span class="string">"blog_author_id"</span> <span class="attr">resultMap</span>=<span class="string">"authorResult"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectBlogById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultMap</span>=<span class="string">"blogResult"</span>&gt;</span></span><br><span class="line">select </span><br><span class="line">  a.blog_id       as blog_id,</span><br><span class="line">  a.blog_title    as blog_title,</span><br><span class="line">  a.blog_author_idas blog_author_id,</span><br><span class="line">  b.author_idas author_id,</span><br><span class="line">  b.author_nameas author_name,</span><br><span class="line">  b.author_emailas author_email</span><br><span class="line">  from Blog a left outer join Author b on a.blog_author_id=b.id </span><br><span class="line">  where a.id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过关联查询，一次性查出所有结果，然后通过<code>&lt;association&gt;</code>的 resultMap属性，指定关联的类，进行映射。 </p><p>且：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"blogResult"</span> <span class="attr">type</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"blog_id"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"title"</span> <span class="attr">column</span>=<span class="string">"blog_title"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"author"</span> <span class="attr">javaType</span>=<span class="string">"Author"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"blog_author_id"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"author_name"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"email"</span> <span class="attr">column</span>=<span class="string">"author_email"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><p>单独将authorResult拿出来，可以重用，</p><p>不重用的可以通过以上方式进行简写。 </p><p>且： </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectBlog"</span> <span class="attr">resultMap</span>=<span class="string">"blogResult"</span>&gt;</span></span><br><span class="line">  select</span><br><span class="line">    B.id            as blog_id,</span><br><span class="line">    B.title         as blog_title,</span><br><span class="line">    A.id            as author_id,</span><br><span class="line">    A.username      as author_username,</span><br><span class="line">    A.password      as author_password,</span><br><span class="line">    A.email         as author_email,</span><br><span class="line">    A.bio           as author_bio,</span><br><span class="line">    CA.id           as co_author_id,</span><br><span class="line">    CA.username     as co_author_username,</span><br><span class="line">    CA.password     as co_author_password,</span><br><span class="line">    CA.email        as co_author_email,</span><br><span class="line">    CA.bio          as co_author_bio</span><br><span class="line">  from Blog B</span><br><span class="line">  left outer join Author A on B.author_id = A.id</span><br><span class="line">  left outer join Author CA on B.co_author_id = CA.id</span><br><span class="line">  where B.id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"authorResult"</span> <span class="attr">type</span>=<span class="string">"Author"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"author_id"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"username"</span> <span class="attr">column</span>=<span class="string">"author_username"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"password"</span> <span class="attr">column</span>=<span class="string">"author_password"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"email"</span> <span class="attr">column</span>=<span class="string">"author_email"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"bio"</span> <span class="attr">column</span>=<span class="string">"author_bio"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"blogResult"</span> <span class="attr">type</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"blog_id"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"title"</span> <span class="attr">column</span>=<span class="string">"blog_title"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"author"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">resultMap</span>=<span class="string">"authorResult"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"coAuthor"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">resultMap</span>=<span class="string">"authorResult"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">columnPrefix</span>=<span class="string">"co_"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="collection"><a href="#collection" class="headerlink" title="collection"></a>collection</h4><p>即，映射的java属性是一个集合类型的。 </p><p>嵌套查询</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"blogResult"</span> <span class="attr">type</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"posts"</span> <span class="attr">javaType</span>=<span class="string">"ArrayList"</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">ofType</span>=<span class="string">"Post"</span> <span class="attr">select</span>=<span class="string">"selectPostByBlog"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectBlogById"</span> <span class="attr">resultMap</span>=<span class="string">"blogResult"</span>&gt;</span></span><br><span class="line">select * from blog where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectPostByBlog"</span> <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">select * from blog where blog_id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>首先执行通过id查询blog，然后通过查询的blog 的结果中的post 的id，去查询post表的记录。 嵌套查询。 </p><p>嵌套结果</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectBlog"</span> <span class="attr">resultMap</span>=<span class="string">"blogResult"</span>&gt;</span></span><br><span class="line">  select</span><br><span class="line">  B.id as blog_id,</span><br><span class="line">  B.title as blog_title,</span><br><span class="line">  B.author_id as blog_author_id,</span><br><span class="line">  P.id as post_id,</span><br><span class="line">  P.subject as post_subject,</span><br><span class="line">  P.body as post_body,</span><br><span class="line">  from Blog B</span><br><span class="line">  left outer join Post P on B.id = P.blog_id</span><br><span class="line">  where B.id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"blogResult"</span> <span class="attr">type</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"blog_id"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"posts"</span> <span class="attr">ofType</span>=<span class="string">"Post"</span> <span class="attr">resultMap</span>=<span class="string">"blogPostResult"</span> <span class="attr">columnPrefix</span>=<span class="string">"post_"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"blogPostResult"</span> <span class="attr">type</span>=<span class="string">"Post"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"subject"</span> <span class="attr">column</span>=<span class="string">"subject"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"body"</span> <span class="attr">column</span>=<span class="string">"body"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"blogResult"</span> <span class="attr">type</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"blog_id"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"title"</span> <span class="attr">column</span>=<span class="string">"blog_title"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"posts"</span> <span class="attr">ofType</span>=<span class="string">"Post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"post_id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"subject"</span> <span class="attr">column</span>=<span class="string">"post_subject"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"body"</span> <span class="attr">column</span>=<span class="string">"post_body"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一次性查询完，然后对结果进行嵌套映射。 </p><h4 id="discriminator"><a href="#discriminator" class="headerlink" title="discriminator"></a>discriminator</h4><p>鉴别器 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">discriminator</span> <span class="attr">javaType</span>=<span class="string">"int"</span> <span class="attr">column</span>=<span class="string">"draft"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">case</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">resultType</span>=<span class="string">"DraftPost"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">discriminator</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"vehicleResult"</span> <span class="attr">type</span>=<span class="string">"Vehicle"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"vin"</span> <span class="attr">column</span>=<span class="string">"vin"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"year"</span> <span class="attr">column</span>=<span class="string">"year"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"make"</span> <span class="attr">column</span>=<span class="string">"make"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"model"</span> <span class="attr">column</span>=<span class="string">"model"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"color"</span> <span class="attr">column</span>=<span class="string">"color"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">discriminator</span> <span class="attr">javaType</span>=<span class="string">"int"</span> <span class="attr">column</span>=<span class="string">"vehicle_type"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">case</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">resultMap</span>=<span class="string">"carResult"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">case</span> <span class="attr">value</span>=<span class="string">"2"</span> <span class="attr">resultMap</span>=<span class="string">"truckResult"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">case</span> <span class="attr">value</span>=<span class="string">"3"</span> <span class="attr">resultMap</span>=<span class="string">"vanResult"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">case</span> <span class="attr">value</span>=<span class="string">"4"</span> <span class="attr">resultMap</span>=<span class="string">"suvResult"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">discriminator</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"carResult"</span> <span class="attr">type</span>=<span class="string">"Car"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"doorCount"</span> <span class="attr">column</span>=<span class="string">"door_count"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"carResult"</span> <span class="attr">type</span>=<span class="string">"Car"</span> <span class="attr">extends</span>=<span class="string">"vehicleResult"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"doorCount"</span> <span class="attr">column</span>=<span class="string">"door_count"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"vehicleResult"</span> <span class="attr">type</span>=<span class="string">"Vehicle"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"vin"</span> <span class="attr">column</span>=<span class="string">"vin"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"year"</span> <span class="attr">column</span>=<span class="string">"year"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"make"</span> <span class="attr">column</span>=<span class="string">"make"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"model"</span> <span class="attr">column</span>=<span class="string">"model"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"color"</span> <span class="attr">column</span>=<span class="string">"color"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">discriminator</span> <span class="attr">javaType</span>=<span class="string">"int"</span> <span class="attr">column</span>=<span class="string">"vehicle_type"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">case</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">resultType</span>=<span class="string">"carResult"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"doorCount"</span> <span class="attr">column</span>=<span class="string">"door_count"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">case</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">case</span> <span class="attr">value</span>=<span class="string">"2"</span> <span class="attr">resultType</span>=<span class="string">"truckResult"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"boxSize"</span> <span class="attr">column</span>=<span class="string">"box_size"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"extendedCab"</span> <span class="attr">column</span>=<span class="string">"extended_cab"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">case</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">case</span> <span class="attr">value</span>=<span class="string">"3"</span> <span class="attr">resultType</span>=<span class="string">"vanResult"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"powerSlidingDoor"</span> <span class="attr">column</span>=<span class="string">"power_sliding_door"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">case</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">case</span> <span class="attr">value</span>=<span class="string">"4"</span> <span class="attr">resultType</span>=<span class="string">"suvResult"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"allWheelDrive"</span> <span class="attr">column</span>=<span class="string">"all_wheel_drive"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">case</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">discriminator</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="自动映射"><a href="#自动映射" class="headerlink" title="自动映射"></a>自动映射</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUsers"</span> <span class="attr">resultMap</span>=<span class="string">"userResultMap"</span>&gt;</span></span><br><span class="line">  select</span><br><span class="line">    user_id             as "id",</span><br><span class="line">    user_name           as "userName",</span><br><span class="line">    hashed_password</span><br><span class="line">  from some_table</span><br><span class="line">  where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userResultMap"</span> <span class="attr">type</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"password"</span> <span class="attr">column</span>=<span class="string">"hashed_password"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结合使用，如上， id和username将自动映射到User类的对应字段上，根据配置，hashed_password将映射到password属性。 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;content&lt;br&gt;{:toc}&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Mybatis基础。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Mybatis&quot;&gt;&lt;a href=&quot;#Mybatis&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="框架和包" scheme="http://peterjiao.com/categories/%E6%A1%86%E6%9E%B6%E5%92%8C%E5%8C%85/"/>
    
    
      <category term="Mybatis" scheme="http://peterjiao.com/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>缓存--消息队列</title>
    <link href="http://peterjiao.com/2016/10/15/2016-10-15-%E7%BC%93%E5%AD%98--%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    <id>http://peterjiao.com/2016/10/15/2016-10-15-缓存--消息队列/</id>
    <published>2016-10-15T12:46:00.000Z</published>
    <updated>2017-02-08T07:33:10.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><blockquote><p>消息队列。</p></blockquote><h1 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h1><h2 id="what？"><a href="#what？" class="headerlink" title="what？"></a>what？</h2><h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><p>ActiveMQ、RabbitMQ、Redis、ZeroMQ、Jafka/kafka</p><h2 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><a href="https://www.rabbitmq.com/" target="_blank" rel="noopener">官网</a></p><h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Send</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">"queue"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ConnectionFactory cf = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">cf.setHost(<span class="string">"127.0.0.1"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Connection conn = cf.newConnection();</span><br><span class="line">Channel channel = conn.createChannel();</span><br><span class="line">channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">String mess = <span class="string">"helloworld across application !"</span>;</span><br><span class="line">channel.basicPublish(<span class="string">""</span>, QUEUE_NAME,<span class="keyword">null</span>, mess.getBytes());</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"mess:::"</span>+mess);</span><br><span class="line">channel.close();</span><br><span class="line">conn.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (TimeoutException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//----------------------------------------------</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ConnectionFactory cf = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">cf.setHost(<span class="string">"127.0.0.1"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Connection conn = cf.newConnection();</span><br><span class="line">Channel channel = conn.createChannel();</span><br><span class="line">channel.queueDeclare(Send.QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">System.out.println(<span class="string">"wait for message,exit for Ctrl+c"</span>);</span><br><span class="line"></span><br><span class="line">QueueingConsumer qc = <span class="keyword">new</span> QueueingConsumer(channel);</span><br><span class="line">channel.basicConsume(Send.QUEUE_NAME, <span class="keyword">true</span>,qc);</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">QueueingConsumer.Delivery deli = qc.nextDelivery();</span><br><span class="line">String mess = <span class="keyword">new</span> String(deli.getBody());</span><br><span class="line">System.out.println(<span class="string">"Received:::"</span>+mess);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (TimeoutException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (ShutdownSignalException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (ConsumerCancelledException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><h4 id="Broker"><a href="#Broker" class="headerlink" title="Broker"></a>Broker</h4><p>中间人，中间件</p><p>消息队列服务器的实体</p><h4 id="Exchange"><a href="#Exchange" class="headerlink" title="Exchange"></a>Exchange</h4><p>交换，交易，交换机</p><p>接收消息，转发消息到绑定的队列上，指定消息按照什么规则，路由到那个队列上，</p><p>一个exchange可以绑定多个队列，一个队列可以被多个Exchange绑定。 </p><p>常用Exchange类型： </p><ul><li>direct：转发消息到routingkey指定的队列，完全根据key进行投递的叫做Direct交换机。</li><li>topic：按照规则转发消息，对key进行模式匹配后，进行投递的叫做Topic交换机，符号<code>#</code>，匹配一个或多个，<code>*</code>匹配正好一个词。</li><li>fanout：转发消息到所有绑定的队列，采用广播模式，一个消息进来，投递到该机绑定的所有队列。</li></ul><h4 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h4><p>消息队列的载体，用来存储消息。每个消息都会被投入到一个或多个队列，</p><h4 id="Binding"><a href="#Binding" class="headerlink" title="Binding"></a>Binding</h4><p>绑定</p><p>用于把Exchange和Queue按照路由规则绑定。 </p><h4 id="RoutingKey"><a href="#RoutingKey" class="headerlink" title="RoutingKey"></a>RoutingKey</h4><p>路由关键字</p><p>Exchange根据这个关键字进行投递。 </p><h4 id="Producter"><a href="#Producter" class="headerlink" title="Producter"></a>Producter</h4><p>消息生产者</p><p>产生消息的程序</p><h4 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h4><p>消息消费者</p><p>接受消息的程序</p><h4 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h4><p>消息通道，</p><p>客户端的每个连接里，可建立多个channel，每个channel代表一个会话任务。</p><h3 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h3><ol><li>客户端连接到消息队列服务器，打开一个channel</li><li>客户端声明一个Exchange，并设置相关属性</li><li>客户端声明一个queue，并设置相关属性</li><li>客户端使用routing key，在Exchange和Queue之间建立绑定关系</li><li>客户端投递消息到Exchange</li><li>Exchange接受到消息后，根据key和已经设置的binding，进行消息路由，将消息投递到一个或多个队列里。 </li></ol><h3 id="使用模式"><a href="#使用模式" class="headerlink" title="使用模式"></a>使用模式</h3><p>单机模式、集群模式、镜像模式。 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;content&lt;br&gt;{:toc}&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;消息队列。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;消息队列&quot;&gt;&lt;a href=&quot;#消息队列&quot; class=&quot;headerlink&quot; title=&quot;消息队列&quot;&gt;
      
    
    </summary>
    
      <category term="缓存" scheme="http://peterjiao.com/categories/%E7%BC%93%E5%AD%98/"/>
    
    
      <category term="消息队列" scheme="http://peterjiao.com/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
</feed>
